added 2
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
Wrote profile results to mba_no_fork_old_findActive_maximize.py.lprof
Timer unit: 1e-06 s

Total time: 10.0143 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       187          852      4.6      0.0          from numpy import array
    98       187        12917     69.1      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       187        48450    259.1      0.5          self.guro.setParam('OutputFlag', 0) 
   101     87987        48751      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102     87800      1898926     21.6     19.0              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       187        25526    136.5      0.3          self.guro.update()
   104                                                   # adding constraints
   105     74701       115971      1.6      1.2          for i, row in enumerate(self.S.toarray()):
   106     74514       279772      3.8      2.8              nz = row.nonzero()[0]
   107     74514      2589677     34.8     25.9              pair = zip(row[nz], array(self.idRs)[nz])
   108     74514        42286      0.6      0.4              s = ''
   109    297516       157881      0.5      1.6              for p in pair:
   110    223002       412061      1.8      4.1                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111     74514        65639      0.9      0.7              s = s.rstrip(' + ')
   112     74514        55522      0.7      0.6              s += ' == %s' % 0.
   113     74514      4260075     57.2     42.5              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 21.6785 s
File: mba_no_fork_old_findActive_maximize.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       187          202      1.1      0.0      act = set()
    71       187         5976     32.0      0.0      arrayIdRs = array(cbm.idRs[:])
    72       187     10683715  57132.2     49.3      cbm.initLp()
    73       187          174      0.9      0.0      if rl:
    74       187           98      0.5      0.0          idRs = rl
    75                                               else:
    76                                                   idRs = cbm.idRs[:]
    77                                               # maximizing all reactions at once
    78                                               # reseting the objective
    79       187         5891     31.5      0.0      cbm.guro.setObjective(0)
    80                                               # setting the objective
    81       187          120      0.6      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    82     87987        63194      0.7      0.3      for var in cbm.guro.getVars():
    83     87800       231106      2.6      1.1          s += 'cbm.%s, ' % var.varName
    84       187          615      3.3      0.0      s = s.rstrip(', ')
    85       187          360      1.9      0.0      s += '])'
    86       187       149242    798.1      0.7      exec s
    87       187        34366    183.8      0.2      cbm.guro.setObjective(cbm.linobj, 1)#1 for maximize
    88       187       293494   1569.5      1.4      cbm.guro.optimize()
    89     73756       122497      1.7      0.6      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    90       155         1756     11.3      0.0      indices = (sol > thresh).nonzero()[0]
    91       155         4994     32.2      0.0      act.update(arrayIdRs[indices])
    92       155         5971     38.5      0.0      idRs = list(set(idRs) - act)
    93                                               # maximizing
    94     24680        13286      0.5      0.1      for rxn in idRs:
    95     24525        14972      0.6      0.1          if rxn not in act:
    96                                                       # reseting the objective
    97      6596       158371     24.0      0.7              cbm.guro.setObjective(0)
    98      6596       350910     53.2      1.6              exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
    99      6596      3955731    599.7     18.2              cbm.guro.optimize()
   100   3175927      5049699      1.6     23.3              sol = abs(array([v.x for v in cbm.guro.getVars()]))
   101      6596        56286      8.5      0.3              indices = (sol > thresh).nonzero()[0]
   102      6596       245756     37.3      1.1              act.update(arrayIdRs[indices])
   103       155         2508     16.2      0.0      idRs = list(set(idRs) - act)
   104                                               # minimizing
   105       329          243      0.7      0.0      for rxn in idRs:
   106       174          108      0.6      0.0          if rxn not in act:
   107                                                       # reseting the objective
   108       174         4068     23.4      0.0              cbm.guro.setObjective(0)
   109       174         9461     54.4      0.0              exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   110       174        74251    426.7      0.3              cbm.guro.optimize()
   111     80924       129147      1.6      0.6              sol = abs(array([v.x for v in cbm.guro.getVars()]))
   112       174         1453      8.4      0.0              indices = (sol > thresh).nonzero()[0]
   113       174         1981     11.4      0.0              act2 = act.copy()
   114       174         5106     29.3      0.0              act.update(arrayIdRs[indices])
   115       174         1261      7.2      0.0              if act2 != act:
   116        16           67      4.2      0.0                  print "added 2"
   117        16           12      0.8      0.0                  if rxn in act:
   118        15           15      1.0      0.0                      print rxn
   119       155           76      0.5      0.0      return act

Total time: 51.4179 s
File: mba_no_fork_old_findActive_maximize.py
Function: pruneRxn at line 121

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   121                                           @profile
   122                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   123                                                        lb_biomass):
   124       131           98      0.7      0.0      try:
   125                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   126                                                   #or if the biomass flux becomes inactive, stop pruning.
   127       131           74      0.6      0.0          rxntodelete = rxn
   128       131      7390479  56415.9     14.4          m0 = deleteCbmRxns(cbm, rxntodelete)
   129                                                   #NOTE the threshold for is set a bit higher for cH rxns
   130       131     16212839 123762.1     31.5          act = findActiveRxns(m0, thresh, cH)
   131       104         3154     30.3      0.0          cH_act = cH & act
   132       104          856      8.2      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   133                                                       #print "not all active 1"
   134        46           31      0.7      0.0              return cbm
   135                                                   #######################################################################
   136                                                   # INPUTS
   137        58           30      0.5      0.0          eps = 1E-10
   138        58           25      0.4      0.0          activityThreshold = 1E-10
   139        58           26      0.4      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   140                                                   #######################################################################
   141                                                   # STATEMENTS
   142        58        14973    258.2      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   143        58         4270     73.6      0.0          hfr = hfr & set(m0.idRs)
   144                                                   #forcing biomass production
   145        58          334      5.8      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   146                                                   #minimizingg the sum of fluxes
   147        58       589958  10171.7      1.1          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   148        58      8310172 143278.8     16.2          mtry1result.initMipGurobi()
   149        58       705288  12160.1      1.4          mtry1result.minSumFluxes_gurobi()
   150                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   151                                                   #function, so that the reactants and products could be written out
   152        58       616911  10636.4      1.2          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   153        31           29      0.9      0.0      except:
   154                                                   #print "exception 1"
   155        31           18      0.6      0.0          return cbm
   156                                                   #EG Identify the reactions that became inactive after the
   157                                                   #reaction was deleted. If extra deleted reactions cause the
   158                                                   #model to be unsolvable, or if extra deleted inactive reactions
   159                                                   #cause any of the hfrs to become inactive, or if a solution
   160                                                   #cannot be obtained with a biomass flux, only delete the one
   161                                                   #reaction. Otherwise, delete the inactive reactions.
   162        54           64      1.2      0.0      try:
   163        54         4124     76.4      0.0          inact = set(m0.idRs) - act - cH
   164        54      3192508  59120.5      6.2          m1 = deleteCbmRxns(m0, inact)
   165        54      7137209 132170.5     13.9          act2 = findActiveRxns(m1, thresh, cH)
   166        49         1436     29.3      0.0          cH_act2 = cH & act2
   167        49          411      8.4      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   168                                                       #print rxntodelete
   169         8            3      0.4      0.0              return m0
   170                                                   ###################################################################
   171                                                   # INPUTS
   172        41           23      0.6      0.0          eps = 1E-10
   173        41           19      0.5      0.0          activityThreshold = 1E-10
   174        41           19      0.5      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   175                                                   ###################################################################
   176                                                   # STATEMENTS
   177        41        10422    254.2      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   178        41         2794     68.1      0.0          hfr = hfr & set(m1.idRs)
   179                                                   #forcing biomass production
   180        41          235      5.7      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   181                                                   #minimizing the sum of fluxes
   182        41       411770  10043.2      0.8          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   183        41      5830596 142209.7     11.3          mtry2result.initMipGurobi()
   184        41       503916  12290.6      1.0          mtry2result.minSumFluxes_gurobi()
   185                                                   #EG Added activityThreshold and the m1.rxns dictionary
   186                                                   #to the function, so that the reactants and products could
   187                                                   #be written out
   188        41       472779  11531.2      0.9          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   189                                                   #print inact
   190        41           50      1.2      0.0          return m1
   191         5            3      0.6      0.0      except:
   192                                                   #print "exception 2"
   193         5            3      0.6      0.0          return m0

Total time: 51.7136 s
File: mba_no_fork_old_findActive_maximize.py
Function: iterativePrunning at line 198

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   198                                           @profile
   199                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   200                                                                 repetition, thresh = 1E-10, EXrxns = [],
   201                                                                 EXtrrxns = [], Othertrrxns = []):
   202                                               """
   203                                               solver can be 'cplex', 'glpk' or 'gurobi'
   204                                               """
   205         1            1      1.0      0.0      if len(EXrxns) > 0:
   206                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   207                                                   random.shuffle(EXrxnsprune)
   208                                                   while EXrxnsprune:
   209                                                       rxn1 = EXrxnsprune.pop()
   210                                                       try:
   211                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   212                                                                             repetition, biomassRxn, lb_biomass)
   213                                                           EXrxnsprune2 = []
   214                                                           for k in mTemp1.idRs:
   215                                                               if k in EXrxnsprune:
   216                                                                   EXrxnsprune2.append(k)
   217                                                           random.shuffle(EXrxnsprune2)
   218                                                           EXrxnsprune = EXrxnsprune2
   219                                                       except NameError:
   220                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   221                                                                             repetition, biomassRxn, lb_biomass)
   222                                                           EXrxnsprune2 = []
   223                                                           for k in mTemp1.idRs:
   224                                                               if k in EXrxnsprune:
   225                                                                   EXrxnsprune2.append(k)
   226                                                           random.shuffle(EXrxnsprune2)
   227                                                           EXrxnsprune = EXrxnsprune2
   228         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   229                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   230                                                   EXtrrxnsprunelist = []
   231                                                   for j in EXtrrxnsprune:
   232                                                       if j in mTemp1.idRs:
   233                                                           EXtrrxnsprunelist.append(j)
   234                                                   random.shuffle(EXtrrxnsprune)
   235                                                   while EXtrrxnsprune:
   236                                                       rxn2 = EXtrrxnsprune.pop()
   237                                                       try:
   238                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   239                                                                             repetition, biomassRxn, lb_biomass)
   240                                                           EXtrrxnsprune2 = []
   241                                                           for k in mTemp1.idRs:
   242                                                               if k in EXtrrxnsprune:
   243                                                                   EXtrrxnsprune2.append(k)
   244                                                           random.shuffle(EXtrrxnsprune2)
   245                                                           EXtrrxnsprune = EXtrrxnsprune2
   246                                                       except NameError:
   247                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   248                                                                             repetition, biomassRxn, lb_biomass)
   249                                                           EXtrrxnsprune2 = []
   250                                                           for k in mTemp1.idRs:
   251                                                               if k in EXtrrxnsprune:
   252                                                                   EXtrrxnsprune2.append(k)
   253                                                           random.shuffle(EXtrrxnsprune2)
   254                                                           EXtrrxnsprune = EXtrrxnsprune2
   255                                           
   256         1            0      0.0      0.0      prunableRxns = []
   257         1            1      1.0      0.0      try:
   258         1            4      4.0      0.0          for j in mTemp1.idRs:
   259                                                       if j not in list(cH):
   260                                                           if j not in EXrxns:
   261                                                               if j not in EXtrrxns:
   262                                                                   if j not in Othertrrxns:
   263                                                                       prunableRxns.append(j)
   264         1            1      1.0      0.0      except NameError:
   265       747          403      0.5      0.0          for j in m.idRs:
   266       746         3677      4.9      0.0              if j not in list(cH):
   267       397          201      0.5      0.0                  if j not in EXrxns:
   268       397          194      0.5      0.0                      if j not in EXtrrxns:
   269       397          194      0.5      0.0                          if j not in Othertrrxns:
   270       397          218      0.5      0.0                              prunableRxns.append(j)
   271         1          235    235.0      0.0      random.shuffle(prunableRxns)
   272       132           89      0.7      0.0      while prunableRxns:
   273       131          129      1.0      0.0          rxn3 = prunableRxns.pop()
   274       131           68      0.5      0.0          try:
   275       131          100      0.8      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   276       130     50493318 388410.1     97.6                                repetition, biomassRxn, lb_biomass)
   277       130          161      1.2      0.0              prunableRxns2 = []
   278     60185        30236      0.5      0.1              for k in mTemp1.idRs:
   279     60055        62627      1.0      0.1                  if k in prunableRxns:
   280     10657         7612      0.7      0.0                      prunableRxns2.append(k)
   281       130         7295     56.1      0.0              random.shuffle(prunableRxns2)
   282       130          171      1.3      0.0              prunableRxns = prunableRxns2
   283                                                       #prunableRxns2_appended = prunableRxns.append()
   284                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   285                                                       #for k in mTemp1.idRs:
   286                                                       #    if k in prunableRxns:
   287                                                       #        prunableRxns2.append(k)
   288                                                       #random.shuffle(prunableRxns2_appended)
   289                                                       #prunableRxns = prunableRxns2_appended
   290         1            1      1.0      0.0          except NameError:
   291         1            1      1.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   292         1      1104506 1104506.0      2.1                                repetition, biomassRxn, lb_biomass)
   293         1            1      1.0      0.0              prunableRxns2 = []
   294       597          288      0.5      0.0              for k in mTemp1.idRs:
   295       596         1596      2.7      0.0                  if k in prunableRxns:
   296       247          131      0.5      0.0                      prunableRxns2.append(k)
   297         1          146    146.0      0.0              random.shuffle(prunableRxns2)
   298         1            1      1.0      0.0              prunableRxns = prunableRxns2
   299                                                       #prunableRxns2_appended = prunableRxns.append()
   300                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   301                                                       #random.shuffle(prunableRxns2_appended)
   302                                                       #prunableRxns = prunableRxns2_appended
   303                                                       #for k in mTemp1.idRs:
   304                                                       #    if k in prunableRxns:
   305                                                       #        prunableRxns2.append(k)
   306                                                       #random.shuffle(prunableRxns2)
   307                                                       #prunableRxns = prunableRxns2
   308         1            1      1.0      0.0      return mTemp1.idRs

Total time: 0.000268 s
File: utilities.py
Function: exportPickle at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def exportPickle(obj, fileName, mode = 'wb', protocol = -1):
    36                                               """
    37                                               Exports an object as a pickle file. By default it writes as binary (wb).
    38                                               Setting mode allows other ways of opening the file (e.g. mode = 'w')
    39                                               """
    40         1           38     38.0     14.2      import cPickle as pickle
    41         1           58     58.0     21.6      f = open(fileName, mode)
    42         1          159    159.0     59.3      pickle.dump(obj, f, protocol = -1)
    43         1           13     13.0      4.9      f.close()

