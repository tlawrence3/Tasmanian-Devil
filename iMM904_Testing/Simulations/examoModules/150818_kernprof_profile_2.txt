R_PI35BP5P_SC
set(['R_LPP_SC', 'R_TREH', 'R_2MBALDtm', 'R_ALCD22yi', 'R_4HBZCOAFm', 'R_SUCCt2r', 'R_4HBZFm', 'R_ALCD26xim', 'R_ALCD24xim', 'R_NTD1', 'R_EX_pap_e_', 'R_PAK_SC', 'R_DHPSm', 'R_GBEZ', 'R_FBP26', 'R_ASNt7', 'R_EX_mal_L_e_', 'R_C22STDS', 'R_LEUt6', 'R_LEUt7', 'R_EX_iamac_e_', 'R_G6PDH2', 'R_DNMPPA', 'R_CITt2r', 'R_EX_succ_e_', 'R_FTHFCLm', 'R_C5STDS', 'R_ALCD2irm', 'R_ATPATF1', 'R_DIAT', 'R_P5CDm', 'R_PHEACt', 'R_ACESt', 'R_ILEt6', 'R_ILEt7', 'R_DPR', 'R_DNTPPA', 'R_IAMOHtm', 'R_D_LACDm', 'R_34HPPt2m', 'R_PYDAMK', 'R_PMI12346PS', 'R_LGTHL', 'R_EX_ergst_e_', 'R_EX_aces_e_', 'R_EX_ibutac_e_', 'R_EX_4abut_e_', 'R_EX_oaa_e_', 'R_ALCD23yi', 'R_PMI12346PH', 'R_HYPOE', 'R_ETOHtm', 'R_IBUTACt', 'R_NADPPPSm', 'R_ALCD25yi', 'R_POLYAO2', 'R_POLYAO3', 'R_IND3ETHtm', 'R_PI3P5K_SC', 'R_ALCD22xim', 'R_EX_pyr_e_', 'R_PMI1346PH', 'R_GLCGSDv', 'R_PI45BP5P_SC', 'R_PMI1346PS', 'R_THZPSN1_SC', 'R_GLYOX', 'R_PFK26', 'R_EX_3mop_e_', 'R_TYRTAim', 'R_ASPGLU2m', 'R_DRTPPD', 'R_GLUSx', 'R_PMDPHT', 'R_13BGH', 'R_EX_pheac_e_', 'R_NTD5', 'R_NTD7', 'R_NTD6', 'R_GLNt7', 'R_GLNt6', 'R_ERGSTt', 'R_PDE1', 'R_RNDR4', 'R_OAAt', 'R_PACALDtm', 'R_THRt2m', 'R_COUCOAFm', 'R_DHORD4i', 'R_EX_ac_e_', 'R_ACHLE2', 'R_ACHLE3', 'R_ACHLE1', 'R_ADPT', 'R_ALCD24yi', 'R_ICDHxm', 'R_OHACT1', 'R_OHACT2', 'R_OHACT3', 'R_OHACT4', 'R_OHACT5', 'R_GLYGS', 'R_DROPPRy', 'R_EX_2mbac_e_', 'R_D_LACDcm', 'R_2MBTOHtm', 'R_NADPPPS', 'R_THRD_Lm', 'R_GLYCt2', 'R_3MBALDtm', 'R_DB4PS', 'R_PAPt', 'R_TMDPP', 'R_HSDxi', 'R_SPRMS', 'R_MEVK1', 'R_MEVK3', 'R_EX_akg_e_', 'R_MEVK4', 'R_NADKm', 'R_ACALDt', 'R_PUNP2', 'R_ALDD2xm', 'R_IBUTOHtm', 'R_DHORDfum', 'R_2PHETOHtm', 'R_KYN', 'R_D_LACt2', 'R_THYMt3r', 'R_ALCD23xim', 'R_AHMMPS', 'R_ASNt6', 'R_TMDK1', 'R_IAMACt', 'R_TYRt2m', 'R_CYSTS', 'R_G3PD1ir', 'R_ALCD25xim', 'R_T4HCINNMFM', 'R_GLCNtv', 'R_EX_lac_D_e_', 'R_EX_thym_e_', 'R_2MBACt', 'R_RNDR3', 'R_RNDR1', 'R_GTPCII', 'R_EX_cit_e_', 'R_2MPPALtm', 'R_TYRt7', 'R_TYRt6', 'R_PI4P5K_SC', 'R_RBFSb', 'R_RBFSa', 'R_EX_acald_e_', 'R_AP4AHr', 'R_34HPLFM', 'R_ABUTt2r', 'R_THFATm', 'R_3MOPt', 'R_C8STI', 'R_AHSERL2'])
not all active 1
set(['R_FAS80COA_L', 'R_ACOAHim', 'R_PPNDH', 'R_FAS120COA', 'R_EX_pacald_e_', 'R_ACACT1m', 'R_FECOSTt', 'R_FACOAL140', 'R_EX_xan_e_', 'R_EX_dttp_e_', 'R_2HBO', 'R_RNDR2', 'R_FAS140COA', 'R_EX_ttdca_e_', 'R_HMGCOASm', 'R_TTDCAtr', 'R_EX_2hb_e_', 'R_DCTPD', 'R_XANt', 'R_GLUt5m', 'R_G6PDA', 'R_PACALDt', 'R_EX_fecost_e_', 'R_HMGCOAtm', 'R_FAS100COA', 'R_INSK', 'R_GLUK', 'R_DTTPt', 'R_ACCOACr', 'R_ADK4', 'R_SAM24MT', 'R_2HBt2'])
not all active 1
set(['R_GSNK', 'R_GUAD'])
set(['R_HETZK', 'R_FDNG', 'R_TMN', 'R_EX_orn_e_', 'R_ORNt2r', 'R_TMPPP', 'R_HMPK1'])
set(['R_EX_sbt_D_e_', 'R_TREt2v', 'R_GAM6Pt', 'R_GLCtv', 'R_TREHv', 'R_SBT_Dt', 'R_EX_gam6p_e_', 'R_EX_glx_e_', 'R_ME2m'])
set(['R_ID3ACALDt', 'R_ME1m'])
not all active 1
not all active 1
set(['R_NTD9', 'R_PROtm', 'R_PUNP3', 'R_PRO1xm', 'R_G5SADrm'])
not all active 1
set(['R_IPPMIa', 'R_2MPPALt', 'R_IPPMIb', 'R_EX_2mppal_e_', 'R_IPMD'])
set([])
R_APRTO2
R_2MBALDt
R_ADMDC
not all active 1
R_PNTK
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
R_EX_4abz_e_
R_EX_asp_L_e_
not all active 1
R_GALU
not all active 1
not all active 1
not all active 1
R_THIORDXp
R_ALATA_L
R_PYRt2m
R_MTRI
R_ASPt5n
R_ACONT
R_TYRt2r
not all active 1
not all active 1
not all active 1
R_ZYMSTt
R_DKMPPD2
not all active 1
not all active 1
not all active 1
not all active 1
R_2DHPtm
R_EX_ala_L_e_
R_AKGDbm
not all active 1
R_ASPt2n
R_AKGt2r
R_PPCDC
not all active 1
not all active 1
R_MTAP
R_TRPt2r
not all active 1
not all active 1
not all active 1
R_EX_zymst_e_
not all active 1
not all active 1
not all active 1
R_SPMDAT1
not all active 1
not all active 1
not all active 1
R_GLYt2r
not all active 1
not all active 1
R_ACtr
not all active 1
R_MDHm
not all active 1
not all active 1
R_EX_fum_e_
not all active 1
R_PANTS
R_ASNNe
R_NABTNO
R_EX_ser_L_e_
R_POLYAO
R_AABTN
not all active 1
not all active 1
not all active 1
R_ACt2r
not all active 1
not all active 1
R_EX_thr_L_e_
R_ACLSm
R_AKGDam
R_L_LACD2cm
not all active 1
R_EX_trp_L_e_
not all active 1
R_EX_tyr_L_e_
R_TALA
R_ALDD22x
not all active 1
not all active 1
R_ILEt2r
not all active 1
R_EX_ile_L_e_
not all active 1
R_GLUN
not all active 1
R_ASPt2r
not all active 1
not all active 1
R_ICDHy
R_DPRm
R_DHAD1m
R_SSALy
not all active 1
not all active 1
not all active 1
R_AKGMAL
R_EX_2mbald_e_
R_UNK3
R_EX_3mbald_e_
R_ABTA
R_EX_gly_e_
not all active 1
not all active 1
R_SUCD3_u6m
not all active 1
not all active 1
not all active 1
not all active 1
R_TRDRDtp
not all active 1
R_MALt2r
not all active 1
not all active 1
not all active 1
R_PPNCL2
R_SPMS
not all active 1
not all active 1
not all active 1
not all active 1
R_PDHcm
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
R_4ABZt
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
Wrote profile results to mba_no_fork_cH.py.lprof
Timer unit: 1e-06 s

Total time: 14.0133 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       252         1236      4.9      0.0          from numpy import array
    98       252        17405     69.1      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       252        64496    255.9      0.5          self.guro.setParam('OutputFlag', 0) 
   101    121084        71158      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102    120832      2638651     21.8     18.8              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       252        34360    136.3      0.2          self.guro.update()
   104                                                   # adding constraints
   105    105239       170153      1.6      1.2          for i, row in enumerate(self.S.toarray()):
   106    104987       401696      3.8      2.9              nz = row.nonzero()[0]
   107    104987      3700097     35.2     26.4              pair = zip(row[nz], array(self.idRs)[nz])
   108    104987        61980      0.6      0.4              s = ''
   109    409913       224455      0.5      1.6              for p in pair:
   110    304926       586721      1.9      4.2                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111    104987        91943      0.9      0.7              s = s.rstrip(' + ')
   112    104987        61524      0.6      0.4              s += ' == %s' % 0.
   113    104987      5887452     56.1     42.0              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 58.671 s
File: mba_no_fork_cH.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       252          259      1.0      0.0      act = set()
    71       252         8230     32.7      0.0      arrayIdRs = array(cbm.idRs[:])
    72       252     15007923  59555.2     25.6      init = cbm.initLp()
    73       252          167      0.7      0.0      init 
    74       252          185      0.7      0.0      if rl:
    75       252          130      0.5      0.0          idRs = rl
    76                                               else:
    77                                                   idRs = cbm.idRs[:]
    78                                               # maximizing all reactions at once
    79                                               # reseting the objective
    80       252         7863     31.2      0.0      cbm.guro.setObjective(0)
    81                                               # setting the objective
    82       252          145      0.6      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    83    121084        80727      0.7      0.1      for var in cbm.guro.getVars():
    84    120832       310740      2.6      0.5          s += 'cbm.%s, ' % var.varName
    85       252          769      3.1      0.0      s = s.rstrip(', ')
    86       252          498      2.0      0.0      s += '])'
    87       252       200834    797.0      0.3      exec s
    88                                               #EG Initially set the objective to maximize
    89       252        46401    184.1      0.1      cbm.guro.setObjective(cbm.linobj)#1 for maximize
    90       252       381441   1513.7      0.7      cbm.guro.optimize()
    91    121084       191862      1.6      0.3      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    92       252         2480      9.8      0.0      indices = (sol > thresh).nonzero()[0]
    93       252         2362      9.4      0.0      act.update(arrayIdRs[indices])
    94       252         9066     36.0      0.0      idRs = list(set(idRs) - act)
    95                                               # maximizing
    96     84546        41764      0.5      0.1      for rxn in idRs:
    97     84294        48879      0.6      0.1          if rxn not in act:
    98                                                   #EG Reduce the number of reactions that need to be investigated
    99                                                   #based off of upper boundary constraints
   100     19272        93661      4.9      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   101                                                           # reseting the objective
   102     19272       457069     23.7      0.8                  cbm.guro.setObjective(0)
   103     19272      1018321     52.8      1.7                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   104     19272     10155574    527.0     17.3                  cbm.guro.optimize()
   105   9194703     14457312      1.6     24.6                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   106     19272       157411      8.2      0.3                  indices = (sol > thresh).nonzero()[0]
   107                                                           #act2 = act.copy()
   108     19272       374116     19.4      0.6                  act.update(arrayIdRs[indices])
   109                                                           #if act2 != act:
   110                                                               #print "added 1"
   111                                                               #if rxn in act:
   112                                                                   #print rxn
   113       252         6799     27.0      0.0      idRs = list(set(idRs) - act)
   114                                               # minimizing
   115      8233         5013      0.6      0.0      for rxn in idRs:
   116      7981         5103      0.6      0.0          if rxn not in act:
   117                                                   #EG Reduce the number of reactions that need to be investigated
   118                                                   #based off of lower boundary constraints
   119      7981        34776      4.4      0.1              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   120                                                           # reseting the objective
   121      7981       185404     23.2      0.3                  cbm.guro.setObjective(0)
   122      7981       415332     52.0      0.7                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   123      7981      3181774    398.7      5.4                  cbm.guro.optimize()
   124   3733617      5825492      1.6      9.9                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   125   3733617      5736698      1.5      9.8                  sol_no_absolute = array([v.x for v in cbm.guro.getVars()])
   126      7981        70636      8.9      0.1                  indices = (sol > thresh).nonzero()[0]
   127                                                           #act2 = act.copy()
   128      7981       147652     18.5      0.3                  act.update(arrayIdRs[indices])
   129                                                           #if act2 != act:
   130                                                               #print "added 2"
   131                                                               #if rxn in act:
   132                                                                   #print rxn
   133                                                                   #print sol
   134                                                                   #print sol_no_absolute
   135                                                                   #print indices
   136                                                                   #print arrayIdRs
   137       252          137      0.5      0.0      return act

Total time: 96.9918 s
File: mba_no_fork_cH.py
Function: pruneRxn at line 139

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   139                                           @profile
   140                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   141                                                        lb_biomass):
   142       174          122      0.7      0.0      try:
   143                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   144                                                   #or if the biomass flux becomes inactive, stop pruning.
   145       174          102      0.6      0.0          rxntodelete = rxn
   146       174      9555972  54919.4      9.9          m0 = deleteCbmRxns(cbm, rxntodelete)
   147                                                   #NOTE the threshold for is set a bit higher for cH rxns
   148       174     43274147 248702.0     44.6          act = findActiveRxns(m0, thresh, cH)
   149       174         5036     28.9      0.0          cH_act = cH & act
   150       174         1902     10.9      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   151        98          328      3.3      0.0              print "not all active 1"
   152        98           62      0.6      0.0              return cbm
   153                                                   #######################################################################
   154                                                   # INPUTS
   155        76           39      0.5      0.0          eps = 1E-10
   156        76           37      0.5      0.0          activityThreshold = 1E-10
   157                                                   #fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   158                                                   #######################################################################
   159                                                   # STATEMENTS
   160                                                   #hfr = importPickle(fFreqBasedRxns % description)['hfr']
   161        76         3635     47.8      0.0          cH = cH & set(m0.idRs)
   162                                                   #forcing biomass production
   163        76          371      4.9      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   164                                                   #minimizingg the sum of fluxes
   165        76       801351  10544.1      0.8          mtry1result = MipSeparateFwdRev_gurobi(m0, cH, eps)
   166        76     11263044 148197.9     11.6          mtry1result.initMipGurobi()
   167        76       659291   8674.9      0.7          mtry1result.minSumFluxes_gurobi()
   168                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   169                                                   #function, so that the reactants and products could be written out
   170        76       895082  11777.4      0.9          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   171                                               except:
   172                                                   print "exception 1"
   173                                                   return cbm
   174                                                   #EG Identify the reactions that became inactive after the
   175                                                   #reaction was deleted. If extra deleted reactions cause the
   176                                                   #model to be unsolvable, or if extra deleted inactive reactions
   177                                                   #cause any of the hfrs to become inactive, or if a solution
   178                                                   #cannot be obtained with a biomass flux, only delete the one
   179                                                   #reaction. Otherwise, delete the inactive reactions.
   180        76           87      1.1      0.0      try:
   181        76         5858     77.1      0.0          inact = set(m0.idRs) - act - cH
   182        76      4129282  54332.7      4.3          m1 = deleteCbmRxns(m0, inact)
   183        76     24649616 324337.1     25.4          act2 = findActiveRxns(m1, thresh, cH)
   184        76         1966     25.9      0.0          cH_act2 = cH & act2
   185        76          952     12.5      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   186        67          263      3.9      0.0              print rxntodelete
   187        67           42      0.6      0.0              return m0
   188                                                   ###################################################################
   189                                                   # INPUTS
   190         9            6      0.7      0.0          eps = 1E-10
   191         9            5      0.6      0.0          activityThreshold = 1E-10
   192                                                   #fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   193                                                   ###################################################################
   194                                                   # STATEMENTS
   195                                                   #hfr = importPickle(fFreqBasedRxns % description)['hfr']
   196         9          463     51.4      0.0          cH = cH & set(m1.idRs)
   197                                                   #forcing biomass production
   198         9           47      5.2      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   199                                                   #minimizing the sum of fluxes
   200         9       108700  12077.8      0.1          mtry2result = MipSeparateFwdRev_gurobi(m1, cH, eps)
   201         9      1424543 158282.6      1.5          mtry2result.initMipGurobi()
   202         9        89719   9968.8      0.1          mtry2result.minSumFluxes_gurobi()
   203                                                   #EG Added activityThreshold and the m1.rxns dictionary
   204                                                   #to the function, so that the reactants and products could
   205                                                   #be written out
   206         9       119627  13291.9      0.1          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   207         9          114     12.7      0.0          print inact
   208         9            8      0.9      0.0          return m1
   209                                               except:
   210                                                   print "exception 2"
   211                                                   return m0

Total time: 97.3561 s
File: mba_no_fork_cH.py
Function: iterativePrunning at line 216

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   216                                           @profile
   217                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   218                                                                 repetition, thresh = 1E-10, EXrxns = [],
   219                                                                 EXtrrxns = [], Othertrrxns = []):
   220                                               """
   221                                               solver can be 'cplex', 'glpk' or 'gurobi'
   222                                               """
   223         1            2      2.0      0.0      if len(EXrxns) > 0:
   224                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   225                                                   random.shuffle(EXrxnsprune)
   226                                                   while EXrxnsprune:
   227                                                       rxn1 = EXrxnsprune.pop()
   228                                                       try:
   229                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   230                                                                             repetition, biomassRxn, lb_biomass)
   231                                                           EXrxnsprune2 = []
   232                                                           for k in mTemp1.idRs:
   233                                                               if k in EXrxnsprune:
   234                                                                   EXrxnsprune2.append(k)
   235                                                           random.shuffle(EXrxnsprune2)
   236                                                           EXrxnsprune = EXrxnsprune2
   237                                                       except NameError:
   238                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   239                                                                             repetition, biomassRxn, lb_biomass)
   240                                                           EXrxnsprune2 = []
   241                                                           for k in mTemp1.idRs:
   242                                                               if k in EXrxnsprune:
   243                                                                   EXrxnsprune2.append(k)
   244                                                           random.shuffle(EXrxnsprune2)
   245                                                           EXrxnsprune = EXrxnsprune2
   246         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   247                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   248                                                   EXtrrxnsprunelist = []
   249                                                   for j in EXtrrxnsprune:
   250                                                       if j in mTemp1.idRs:
   251                                                           EXtrrxnsprunelist.append(j)
   252                                                   random.shuffle(EXtrrxnsprune)
   253                                                   while EXtrrxnsprune:
   254                                                       rxn2 = EXtrrxnsprune.pop()
   255                                                       try:
   256                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   257                                                                             repetition, biomassRxn, lb_biomass)
   258                                                           EXtrrxnsprune2 = []
   259                                                           for k in mTemp1.idRs:
   260                                                               if k in EXtrrxnsprune:
   261                                                                   EXtrrxnsprune2.append(k)
   262                                                           random.shuffle(EXtrrxnsprune2)
   263                                                           EXtrrxnsprune = EXtrrxnsprune2
   264                                                       except NameError:
   265                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   266                                                                             repetition, biomassRxn, lb_biomass)
   267                                                           EXtrrxnsprune2 = []
   268                                                           for k in mTemp1.idRs:
   269                                                               if k in EXtrrxnsprune:
   270                                                                   EXtrrxnsprune2.append(k)
   271                                                           random.shuffle(EXtrrxnsprune2)
   272                                                           EXtrrxnsprune = EXtrrxnsprune2
   273                                           
   274         1            0      0.0      0.0      prunableRxns = []
   275         1            1      1.0      0.0      try:
   276         1            4      4.0      0.0          for j in mTemp1.idRs:
   277                                                       if j not in list(cH):
   278                                                           if j not in EXrxns:
   279                                                               if j not in EXtrrxns:
   280                                                                   if j not in Othertrrxns:
   281                                                                       prunableRxns.append(j)
   282         1            1      1.0      0.0      except NameError:
   283       747          356      0.5      0.0          for j in m.idRs:
   284       746         3655      4.9      0.0              if j not in list(cH):
   285       397          176      0.4      0.0                  if j not in EXrxns:
   286       397          173      0.4      0.0                      if j not in EXtrrxns:
   287       397          170      0.4      0.0                          if j not in Othertrrxns:
   288       397          208      0.5      0.0                              prunableRxns.append(j)
   289         1          237    237.0      0.0      random.shuffle(prunableRxns)
   290       175          121      0.7      0.0      while prunableRxns:
   291       174          175      1.0      0.0          rxn3 = prunableRxns.pop()
   292       174           74      0.4      0.0          try:
   293       174          122      0.7      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   294       173     96213117 556145.2     98.8                                repetition, biomassRxn, lb_biomass)
   295       173          195      1.1      0.0              prunableRxns2 = []
   296     83056        41669      0.5      0.0              for k in mTemp1.idRs:
   297     82883        88047      1.1      0.1                  if k in prunableRxns:
   298     15163        11044      0.7      0.0                      prunableRxns2.append(k)
   299       173        10242     59.2      0.0              random.shuffle(prunableRxns2)
   300       173          158      0.9      0.0              prunableRxns = prunableRxns2
   301                                                       #prunableRxns2_appended = prunableRxns.append()
   302                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   303                                                       #for k in mTemp1.idRs:
   304                                                       #    if k in prunableRxns:
   305                                                       #        prunableRxns2.append(k)
   306                                                       #random.shuffle(prunableRxns2_appended)
   307                                                       #prunableRxns = prunableRxns2_appended
   308         1            1      1.0      0.0          except NameError:
   309         1            1      1.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   310         1       983276 983276.0      1.0                                repetition, biomassRxn, lb_biomass)
   311         1            1      1.0      0.0              prunableRxns2 = []
   312       746          398      0.5      0.0              for k in mTemp1.idRs:
   313       745         2054      2.8      0.0                  if k in prunableRxns:
   314       396          229      0.6      0.0                      prunableRxns2.append(k)
   315         1          227    227.0      0.0              random.shuffle(prunableRxns2)
   316         1            2      2.0      0.0              prunableRxns = prunableRxns2
   317                                                       #prunableRxns2_appended = prunableRxns.append()
   318                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   319                                                       #random.shuffle(prunableRxns2_appended)
   320                                                       #prunableRxns = prunableRxns2_appended
   321                                                       #for k in mTemp1.idRs:
   322                                                       #    if k in prunableRxns:
   323                                                       #        prunableRxns2.append(k)
   324                                                       #random.shuffle(prunableRxns2)
   325                                                       #prunableRxns = prunableRxns2
   326         1            1      1.0      0.0      return mTemp1.idRs

