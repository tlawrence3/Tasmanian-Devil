Wrote profile results to mba.py.lprof
Timer unit: 1e-06 s

Total time: 0 s
File: mba.py
Function: pruneRxn at line 122

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   122                                           @profile
   123                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   124                                                        lb_biomass):
   125                                               try:
   126                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   127                                                   #or if the biomass flux becomes inactive, stop pruning.
   128                                                   rxntodelete = rxn
   129                                                   m0 = deleteCbmRxns(cbm, rxntodelete)
   130                                                   #NOTE the threshold for is set a bit higher for cH rxns
   131                                                   act = findActiveRxns(m0, thresh, cH)
   132                                                   cH_act = cH & act
   133                                                   if (len(cH - cH_act) != 0):#not all cH rxns are active
   134                                                       #print "not all active 1"
   135                                                       return cbm
   136                                                   #######################################################################
   137                                                   # INPUTS
   138                                                   eps = 1E-10
   139                                                   activityThreshold = 1E-10
   140                                                   fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   141                                                   #######################################################################
   142                                                   # STATEMENTS
   143                                                   hfr = importPickle(fFreqBasedRxns % description)['hfr']
   144                                                   hfr = hfr & set(m0.idRs)
   145                                                   #forcing biomass production
   146                                                   m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   147                                                   #minimizingg the sum of fluxes
   148                                                   mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   149                                                   mtry1result.initMipGurobi()
   150                                                   mtry1result.minSumFluxes_gurobi()
   151                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   152                                                   #function, so that the reactants and products could be written out
   153                                                   nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   154                                               except:
   155                                                   #print "exception 1"
   156                                                   return cbm
   157                                                   #EG Identify the reactions that became inactive after the
   158                                                   #reaction was deleted. If extra deleted reactions cause the
   159                                                   #model to be unsolvable, or if extra deleted inactive reactions
   160                                                   #cause any of the hfrs to become inactive, or if a solution
   161                                                   #cannot be obtained with a biomass flux, only delete the one
   162                                                   #reaction. Otherwise, delete the inactive reactions.
   163                                               try:
   164                                                   inact = set(m0.idRs) - act - cH
   165                                                   m1 = deleteCbmRxns(m0, inact)
   166                                                   act2 = findActiveRxns(m1, thresh, cH)
   167                                                   cH_act2 = cH & act2
   168                                                   if (len(cH - cH_act2) != 0):#not all cH rxns are active
   169                                                       #print rxntodelete
   170                                                       return m0
   171                                                   ###################################################################
   172                                                   # INPUTS
   173                                                   eps = 1E-10
   174                                                   activityThreshold = 1E-10
   175                                                   fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   176                                                   ###################################################################
   177                                                   # STATEMENTS
   178                                                   hfr = importPickle(fFreqBasedRxns % description)['hfr']
   179                                                   hfr = hfr & set(m1.idRs)
   180                                                   #forcing biomass production
   181                                                   m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   182                                                   #minimizing the sum of fluxes
   183                                                   mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   184                                                   mtry2result.initMipGurobi()
   185                                                   mtry2result.minSumFluxes_gurobi()
   186                                                   #EG Added activityThreshold and the m1.rxns dictionary
   187                                                   #to the function, so that the reactants and products could
   188                                                   #be written out
   189                                                   nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   190                                                   #print inact
   191                                                   return m1
   192                                               except:
   193                                                   #print "exception 2"
   194                                                   return m0

Total time: 0 s
File: mba.py
Function: iterativePrunning at line 199

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   199                                           @profile
   200                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   201                                                                 repetition, thresh = 1E-10, EXrxns = [],
   202                                                                 EXtrrxns = [], Othertrrxns = []):
   203                                               """
   204                                               solver can be 'cplex', 'glpk' or 'gurobi'
   205                                               """
   206                                               if len(EXrxns) > 0:
   207                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   208                                                   random.shuffle(EXrxnsprune)
   209                                                   while EXrxnsprune:
   210                                                       rxn1 = EXrxnsprune.pop()
   211                                                       try:
   212                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   213                                                                             repetition, biomassRxn, lb_biomass)
   214                                                           EXrxnsprune2 = []
   215                                                           for k in mTemp1.idRs:
   216                                                               if k in EXrxnsprune:
   217                                                                   EXrxnsprune2.append(k)
   218                                                           random.shuffle(EXrxnsprune2)
   219                                                           EXrxnsprune = EXrxnsprune2
   220                                                       except NameError:
   221                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   222                                                                             repetition, biomassRxn, lb_biomass)
   223                                                           EXrxnsprune2 = []
   224                                                           for k in mTemp1.idRs:
   225                                                               if k in EXrxnsprune:
   226                                                                   EXrxnsprune2.append(k)
   227                                                           random.shuffle(EXrxnsprune2)
   228                                                           EXrxnsprune = EXrxnsprune2
   229                                               if len(EXtrrxns) > 0:
   230                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   231                                                   EXtrrxnsprunelist = []
   232                                                   for j in EXtrrxnsprune:
   233                                                       if j in mTemp1.idRs:
   234                                                           EXtrrxnsprunelist.append(j)
   235                                                   random.shuffle(EXtrrxnsprune)
   236                                                   while EXtrrxnsprune:
   237                                                       rxn2 = EXtrrxnsprune.pop()
   238                                                       try:
   239                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   240                                                                             repetition, biomassRxn, lb_biomass)
   241                                                           EXtrrxnsprune2 = []
   242                                                           for k in mTemp1.idRs:
   243                                                               if k in EXtrrxnsprune:
   244                                                                   EXtrrxnsprune2.append(k)
   245                                                           random.shuffle(EXtrrxnsprune2)
   246                                                           EXtrrxnsprune = EXtrrxnsprune2
   247                                                       except NameError:
   248                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   249                                                                             repetition, biomassRxn, lb_biomass)
   250                                                           EXtrrxnsprune2 = []
   251                                                           for k in mTemp1.idRs:
   252                                                               if k in EXtrrxnsprune:
   253                                                                   EXtrrxnsprune2.append(k)
   254                                                           random.shuffle(EXtrrxnsprune2)
   255                                                           EXtrrxnsprune = EXtrrxnsprune2
   256                                           
   257                                               prunableRxns = []
   258                                               try:
   259                                                   for j in mTemp1.idRs:
   260                                                       if j not in list(cH):
   261                                                           if j not in EXrxns:
   262                                                               if j not in EXtrrxns:
   263                                                                   if j not in Othertrrxns:
   264                                                                       prunableRxns.append(j)
   265                                               except NameError:
   266                                                   for j in m.idRs:
   267                                                       if j not in list(cH):
   268                                                           if j not in EXrxns:
   269                                                               if j not in EXtrrxns:
   270                                                                   if j not in Othertrrxns:
   271                                                                       prunableRxns.append(j)
   272                                               random.shuffle(prunableRxns)
   273                                               while prunableRxns:
   274                                                   rxn3 = prunableRxns.pop()
   275                                                   try:
   276                                                       mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   277                                                                         repetition, biomassRxn, lb_biomass)
   278                                                       prunableRxns2 = []
   279                                                       for k in mTemp1.idRs:
   280                                                           if k in prunableRxns:
   281                                                               prunableRxns2.append(k)
   282                                                       random.shuffle(prunableRxns2)
   283                                                       prunableRxns = prunableRxns2
   284                                                       #prunableRxns2_appended = prunableRxns.append()
   285                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   286                                                       #for k in mTemp1.idRs:
   287                                                       #    if k in prunableRxns:
   288                                                       #        prunableRxns2.append(k)
   289                                                       #random.shuffle(prunableRxns2_appended)
   290                                                       #prunableRxns = prunableRxns2_appended
   291                                                   except NameError:
   292                                                       mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   293                                                                         repetition, biomassRxn, lb_biomass)
   294                                                       prunableRxns2 = []
   295                                                       for k in mTemp1.idRs:
   296                                                           if k in prunableRxns:
   297                                                               prunableRxns2.append(k)
   298                                                       random.shuffle(prunableRxns2)
   299                                                       prunableRxns = prunableRxns2
   300                                                       #prunableRxns2_appended = prunableRxns.append()
   301                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   302                                                       #random.shuffle(prunableRxns2_appended)
   303                                                       #prunableRxns = prunableRxns2_appended
   304                                                       #for k in mTemp1.idRs:
   305                                                       #    if k in prunableRxns:
   306                                                       #        prunableRxns2.append(k)
   307                                                       #random.shuffle(prunableRxns2)
   308                                                       #prunableRxns = prunableRxns2
   309                                               return mTemp1.idRs

