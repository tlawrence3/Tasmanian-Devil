set(['R_2MBALDtm', 'R_ALCD22yi', 'R_ALCD24xim', 'R_NTD10', 'R_EX_mal_L_e_', 'R_EX_3mbald_e_', 'R_EX_iamac_e_', 'R_G6PDH2', 'R_CITt2r', 'R_ALCD2irm', 'R_DIAT', 'R_PHEACt', 'R_ACESt', 'R_DPR', 'R_IAMOHtm', 'R_RNDR2', 'R_PUNP2', 'R_EX_aces_e_', 'R_RNDR3', 'R_EX_ibutac_e_', 'R_TREHv', 'R_ALCD23yi', 'R_ETOHtm', 'R_IBUTACt', 'R_TREt2v', 'R_AKP1', 'R_ALCD25yi', 'R_POLYAO2', 'R_3MBALDt', 'R_ALCD22xim', 'R_EX_pacald_e_', 'R_EX_pyr_e_', 'R_GLCGSDv', 'R_THZPSN1_SC', 'R_G5SADrm', 'R_EX_3mop_e_', 'R_DRTPPD', 'R_PMDPHT', 'R_13BGH', 'R_NTD1', 'R_DROPPRy', 'R_NTD6', 'R_ERGSTt', 'R_EX_ac_e_', 'R_ACHLE2', 'R_ACHLE3', 'R_HSDyi', 'R_EX_pheac_e_', 'R_PYR5CDm', 'R_RBFSb', 'R_ICDHxm', 'R_OHACT1', 'R_TYRt2r', 'R_OHACT3', 'R_OHACT4', 'R_OHACT5', 'R_EX_2mbac_e_', 'R_D_LACDcm', 'R_EX_xan_e_', 'R_2MBTOHtm', 'R_DB4PS', 'R_3MBALDtm', 'R_TMDPP', 'R_SPRMS', 'R_MEVK1', 'R_MEVK2', 'R_EX_akg_e_', 'R_MEVK4', 'R_PUNP7', 'R_ACALDt', 'R_D_LACt2', 'R_IBUTOHtm', 'R_EX_fum_e_', 'R_DHORD4i', 'R_POLYAO3', 'R_GTPCII', 'R_THYMt3r', 'R_ALCD23xim', 'R_AHMMPS', 'R_IAMACt', 'R_GLCNtv', 'R_EX_lac_D_e_', 'R_RNDR4', 'R_EX_ergst_e_', 'R_FUMt2r', 'R_RNDR1', 'R_FOLD3m', 'R_EX_cit_e_', 'R_2MPPALtm', 'R_DCTPD', 'R_EX_thym_e_', 'R_HPPKm', 'R_PACALDt', 'R_2OBUTtm', 'R_RBFSa', 'R_EX_acald_e_', 'R_XANt', 'R_GLCtv', 'R_3MOPt', 'R_2MBACt'])
set(['R_FAS80COA_L', 'R_ACOAHim', 'R_2MBALDt', 'R_IPPMIa', 'R_IPPMIb', 'R_ALCD24yi', 'R_IPMD', 'R_FACOAL140', 'R_OMCDC', 'R_TYRt2m', 'R_FAS140COA', 'R_EX_ttdca_e_', 'R_TTDCAtr', 'R_TYRTAim', 'R_GLUt5m', 'R_FAS100COA', 'R_ILEt2r', 'R_NTD7', 'R_FAS120COA', 'R_ALDD2xm', 'R_ACCOACr', 'R_OAAt', 'R_EX_oaa_e_', 'R_ME2m', 'R_EX_2mbald_e_'])
set(['R_2MPPALt', 'R_EX_sbt_D_e_', 'R_DTTPt', 'R_EX_2mppal_e_', 'R_KYN', 'R_TMDK1', 'R_EX_dttp_e_', 'R_ADPT', 'R_SBT_Dt'])
set(['R_ALCD26xim', 'R_ABUTt2r', 'R_GLYt2r', 'R_EX_4abut_e_', 'R_EX_hxan_e_', 'R_ID3ACALDtm', 'R_HXANt2r', 'R_IND3ETHtm'])
set(['R_SUCCt2r', 'R_EX_succ_e_'])
set(['R_FDNG', 'R_GLXt', 'R_EX_glx_e_', 'R_EX_co2_e_'])
not all active 1
not all active 1
not all active 1
set(['R_34HPPt2m', 'R_PAPt', 'R_34HPLFM', 'R_4HBZCOAFm', 'R_T4HCINNMFM', 'R_4HBZFm', 'R_COUCOAFm', 'R_EX_pap_e_'])
set(['R_DKMPPD2', 'R_PPNCL2', 'R_SPMDAT1', 'R_ALDD22x', 'R_MTRI', 'R_UNK3', 'R_AABTN', 'R_FECOSTt', 'R_PANTS', 'R_MOHMT', 'R_ABTA', 'R_MTAP', 'R_POLYAO', 'R_NABTNO', 'R_SPMS', 'R_2DHPtm', 'R_PANTtm', 'R_MDRPD', 'R_DPRm', 'R_EX_fecost_e_', 'R_SSALy', 'R_APRTO2', 'R_PNTK', 'R_ADMDC', 'R_PPCDC'])
not all active 1
not all active 1
not all active 1
exception 1
not all active 1
not all active 1
exception 1
not all active 1
exception 2
not all active 1
not all active 1
exception 2
not all active 1
exception 2
not all active 1
not all active 1
exception 1
not all active 1
not all active 1
exception 1
not all active 1
not all active 1
not all active 1
exception 2
not all active 1
exception 2
not all active 1
not all active 1
not all active 1
not all active 1
exception 1
exception 2
exception 2
not all active 1
exception 2
not all active 1
exception 1
not all active 1
exception 2
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
exception 1
not all active 1
not all active 1
not all active 1
exception 2
exception 2
exception 2
not all active 1
R_PROtm
R_ASPt2n
not all active 1
R_TALA
not all active 1
not all active 1
not all active 1
not all active 1
R_EX_arg_L_e_
not all active 1
exception 1
R_FTHFCLm
exception 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
R_PAK_SC
not all active 1
not all active 1
not all active 1
R_HCO3tn
not all active 1
not all active 1
not all active 1
set(['R_P5CDm', 'R_PI35BP5P_SC', 'R_LPP_SC', 'R_ARGt2r', 'R_PMI12346PS', 'R_CO2tn', 'R_THRt2r', 'R_GAM6Pt', 'R_AKGDam', 'R_CHLSTI', 'R_MALt2r', 'R_HCO3En', 'R_AKGt2r', 'R_ASPt5n', 'R_EX_gam6p_e_', 'R_GLUN', 'R_PRO1xm', 'R_THFATm'])
set(['R_GLNt7', 'R_G6PDA', 'R_ICDHy'])
set(['R_GLUt7m', 'R_PMI1346PS', 'R_ME1m'])
set(['R_LGTHL', 'R_GLYOX'])
set([])
set(['R_HISt2r', 'R_PUNP3'])
set(['R_PYDAMK'])
exception 1
set(['R_LEUt6'])
exception 1
set(['R_PI45BP5P_SC'])
not all active 1
not all active 1
not all active 1
set([])
set(['R_ALAt2r'])
exception 1
set(['R_EX_zymst_e_'])
not all active 1
exception 1
exception 1
not all active 1
set(['R_OHACT2'])
set([])
set(['R_FORt'])
set([])
set(['R_ACPSm', 'R_PTPATi', 'R_PAN4Ptm', 'R_DPCOAK', 'R_BPNT'])
not all active 1
set(['R_GLUK', 'R_UGLT'])
exception 1
set(['R_ILEt7'])
set([])
exception 1
set([])
exception 1
set(['R_ALCD25xim', 'R_2PHETOHtm'])
set(['R_TMN', 'R_PMPK', 'R_HMPK1', 'R_TMPPP'])
set([])
set([])
set(['R_ASNt7'])
not all active 1
set(['R_EX_id3acald_e_'])
set(['R_ADK4'])
set(['R_ACtr'])
exception 1
set(['R_EX_orn_e_'])
set([])
exception 1
exception 1
not all active 1
set(['R_FBP26'])
not all active 1
set(['R_KARA1im', 'R_DHAD1m'])
set(['R_TRDOXtp', 'R_TRDRDtp'])
exception 1
not all active 1
not all active 1
exception 1
not all active 1
not all active 1
exception 1
set(['R_EX_4abz_e_'])
set([])
set(['R_NADPPPSm'])
exception 1
not all active 1
not all active 1
set([])
set(['R_EX_trp_L_e_'])
exception 1
exception 1
set([])
set([])
set([])
set([])
exception 1
exception 1
exception 1
exception 1
set([])
exception 1
Wrote profile results to mba_no_fork_minimize.py.lprof
Timer unit: 1e-06 s

Total time: 15.2682 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       248         1284      5.2      0.0          from numpy import array
    98       248        19124     77.1      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       248        65673    264.8      0.4          self.guro.setParam('OutputFlag', 0) 
   101    127461        82996      0.7      0.5          for i, rxn in enumerate(self.idRs):
   102    127213      2889809     22.7     18.9              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       248        39844    160.7      0.3          self.guro.update()
   104                                                   # adding constraints
   105    106122       193676      1.8      1.3          for i, row in enumerate(self.S.toarray()):
   106    105874       447096      4.2      2.9              nz = row.nonzero()[0]
   107    105874      4086647     38.6     26.8              pair = zip(row[nz], array(self.idRs)[nz])
   108    105874        66789      0.6      0.4              s = ''
   109    423951       254144      0.6      1.7              for p in pair:
   110    318077       634602      2.0      4.2                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111    105874       100220      0.9      0.7              s = s.rstrip(' + ')
   112    105874        68675      0.6      0.4              s += ' == %s' % 0.
   113    105874      6317624     59.7     41.4              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 30.4215 s
File: mba_no_fork_minimize.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       248          285      1.1      0.0      act = set()
    71       248         9232     37.2      0.0      arrayIdRs = array(cbm.idRs[:])
    72       248     16329747  65845.8     53.7      init = cbm.initLp()
    73       248          189      0.8      0.0      init 
    74       248          236      1.0      0.0      if rl:
    75       248          153      0.6      0.0          idRs = rl
    76                                               else:
    77                                                   idRs = cbm.idRs[:]
    78                                               # maximizing all reactions at once
    79                                               # reseting the objective
    80       248        10111     40.8      0.0      cbm.guro.setObjective(0)
    81                                               # setting the objective
    82       248          192      0.8      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    83    127461       104005      0.8      0.3      for var in cbm.guro.getVars():
    84    127213       404092      3.2      1.3          s += 'cbm.%s, ' % var.varName
    85       248          825      3.3      0.0      s = s.rstrip(', ')
    86       248          529      2.1      0.0      s += '])'
    87       248       227427    917.0      0.7      exec s
    88                                               #EG Initially set the objective to maximize
    89       248        51809    208.9      0.2      cbm.guro.setObjective(cbm.linobj, -1)#1 for maximize
    90       248       580121   2339.2      1.9      cbm.guro.optimize()
    91    107374       225468      2.1      0.7      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    92       208         2545     12.2      0.0      indices = (sol > thresh).nonzero()[0]
    93       208        10973     52.8      0.0      act.update(arrayIdRs[indices])
    94       208         7605     36.6      0.0      idRs = list(set(idRs) - act)
    95                                               # maximizing
    96     15710        10662      0.7      0.0      for rxn in idRs:
    97     15502        11344      0.7      0.0          if rxn not in act:
    98                                                   #EG Reduce the number of reactions that need to be investigated
    99                                                   #based off of upper boundary constraints
   100      6010        40750      6.8      0.1              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   101                                                           # reseting the objective
   102      6010       161706     26.9      0.5                  cbm.guro.setObjective(0)
   103      6010       347082     57.8      1.1                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   104      6010      4284766    712.9     14.1                  cbm.guro.optimize()
   105   3143820      6347623      2.0     20.9                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   106      6010        55337      9.2      0.2                  indices = (sol > thresh).nonzero()[0]
   107                                                           #act2 = act.copy()
   108      6010       281260     46.8      0.9                  act.update(arrayIdRs[indices])
   109                                                           #if act2 != act:
   110                                                               #print "added 1"
   111                                                               #if rxn in act:
   112                                                                   #print rxn
   113       208         2532     12.2      0.0      idRs = list(set(idRs) - act)
   114                                               # minimizing
   115       545          456      0.8      0.0      for rxn in idRs:
   116       337          251      0.7      0.0          if rxn not in act:
   117                                                   #EG Reduce the number of reactions that need to be investigated
   118                                                   #based off of lower boundary constraints
   119       337         2091      6.2      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   120                                                           # reseting the objective
   121       337         9108     27.0      0.0                  cbm.guro.setObjective(0)
   122       337        19585     58.1      0.1                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   123       337       150538    446.7      0.5                  cbm.guro.optimize()
   124    179951       360538      2.0      1.2                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   125    179951       356179      2.0      1.2                  sol_no_absolute = array([v.x for v in cbm.guro.getVars()])
   126       337         3570     10.6      0.0                  indices = (sol > thresh).nonzero()[0]
   127                                                           #act2 = act.copy()
   128       337        10506     31.2      0.0                  act.update(arrayIdRs[indices])
   129                                                           #if act2 != act:
   130                                                               #print "added 2"
   131                                                               #if rxn in act:
   132                                                                   #print rxn
   133                                                                   #print sol
   134                                                                   #print sol_no_absolute
   135                                                                   #print indices
   136                                                                   #print arrayIdRs
   137       208          106      0.5      0.0      return act

Total time: 73.8882 s
File: mba_no_fork_minimize.py
Function: pruneRxn at line 139

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   139                                           @profile
   140                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   141                                                        lb_biomass):
   142       175          136      0.8      0.0      try:
   143                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   144                                                   #or if the biomass flux becomes inactive, stop pruning.
   145       175          125      0.7      0.0          rxntodelete = rxn
   146       175     12392055  70811.7     16.8          m0 = deleteCbmRxns(cbm, rxntodelete)
   147                                                   #NOTE the threshold for is set a bit higher for cH rxns
   148       175     23828143 136160.8     32.2          act = findActiveRxns(m0, thresh, cH)
   149       147         5033     34.2      0.0          cH_act = cH & act
   150       147         1334      9.1      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   151        73          258      3.5      0.0              print "not all active 1"
   152        73           59      0.8      0.0              return cbm
   153                                                   #######################################################################
   154                                                   # INPUTS
   155        74           45      0.6      0.0          eps = 1E-10
   156        74           45      0.6      0.0          activityThreshold = 1E-10
   157        74           40      0.5      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   158                                                   #######################################################################
   159                                                   # STATEMENTS
   160        74        19812    267.7      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   161        74         4731     63.9      0.0          hfr = hfr & set(m0.idRs)
   162                                                   #forcing biomass production
   163        74          436      5.9      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   164                                                   #minimizingg the sum of fluxes
   165        74       855263  11557.6      1.2          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   166        74     11442700 154631.1     15.5          mtry1result.initMipGurobi()
   167        74      1006071  13595.6      1.4          mtry1result.minSumFluxes_gurobi()
   168                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   169                                                   #function, so that the reactants and products could be written out
   170        74       951532  12858.5      1.3          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   171        31           28      0.9      0.0      except:
   172        31          105      3.4      0.0          print "exception 1"
   173        31           15      0.5      0.0          return cbm
   174                                                   #EG Identify the reactions that became inactive after the
   175                                                   #reaction was deleted. If extra deleted reactions cause the
   176                                                   #model to be unsolvable, or if extra deleted inactive reactions
   177                                                   #cause any of the hfrs to become inactive, or if a solution
   178                                                   #cannot be obtained with a biomass flux, only delete the one
   179                                                   #reaction. Otherwise, delete the inactive reactions.
   180        71          120      1.7      0.0      try:
   181        71         5985     84.3      0.0          inact = set(m0.idRs) - act - cH
   182        71      4915502  69232.4      6.7          m1 = deleteCbmRxns(m0, inact)
   183        71      8668051 122085.2     11.7          act2 = findActiveRxns(m1, thresh, cH)
   184        59         1859     31.5      0.0          cH_act2 = cH & act2
   185        59          503      8.5      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   186         7           25      3.6      0.0              print rxntodelete
   187         7            5      0.7      0.0              return m0
   188                                                   ###################################################################
   189                                                   # INPUTS
   190        52           31      0.6      0.0          eps = 1E-10
   191        52           38      0.7      0.0          activityThreshold = 1E-10
   192        52           35      0.7      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   193                                                   ###################################################################
   194                                                   # STATEMENTS
   195        52        13350    256.7      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   196        52         3178     61.1      0.0          hfr = hfr & set(m1.idRs)
   197                                                   #forcing biomass production
   198        52          293      5.6      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   199                                                   #minimizing the sum of fluxes
   200        52       548463  10547.4      0.7          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   201        52      7861563 151183.9     10.6          mtry2result.initMipGurobi()
   202        52       693060  13328.1      0.9          mtry2result.minSumFluxes_gurobi()
   203                                                   #EG Added activityThreshold and the m1.rxns dictionary
   204                                                   #to the function, so that the reactants and products could
   205                                                   #be written out
   206        52       667518  12836.9      0.9          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   207        52          557     10.7      0.0          print inact
   208        52           46      0.9      0.0          return m1
   209        12           11      0.9      0.0      except:
   210        12           43      3.6      0.0          print "exception 2"
   211        12           11      0.9      0.0          return m0

Total time: 74.3433 s
File: mba_no_fork_minimize.py
Function: iterativePrunning at line 216

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   216                                           @profile
   217                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   218                                                                 repetition, thresh = 1E-10, EXrxns = [],
   219                                                                 EXtrrxns = [], Othertrrxns = []):
   220                                               """
   221                                               solver can be 'cplex', 'glpk' or 'gurobi'
   222                                               """
   223         1            1      1.0      0.0      if len(EXrxns) > 0:
   224                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   225                                                   random.shuffle(EXrxnsprune)
   226                                                   while EXrxnsprune:
   227                                                       rxn1 = EXrxnsprune.pop()
   228                                                       try:
   229                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   230                                                                             repetition, biomassRxn, lb_biomass)
   231                                                           EXrxnsprune2 = []
   232                                                           for k in mTemp1.idRs:
   233                                                               if k in EXrxnsprune:
   234                                                                   EXrxnsprune2.append(k)
   235                                                           random.shuffle(EXrxnsprune2)
   236                                                           EXrxnsprune = EXrxnsprune2
   237                                                       except NameError:
   238                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   239                                                                             repetition, biomassRxn, lb_biomass)
   240                                                           EXrxnsprune2 = []
   241                                                           for k in mTemp1.idRs:
   242                                                               if k in EXrxnsprune:
   243                                                                   EXrxnsprune2.append(k)
   244                                                           random.shuffle(EXrxnsprune2)
   245                                                           EXrxnsprune = EXrxnsprune2
   246         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   247                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   248                                                   EXtrrxnsprunelist = []
   249                                                   for j in EXtrrxnsprune:
   250                                                       if j in mTemp1.idRs:
   251                                                           EXtrrxnsprunelist.append(j)
   252                                                   random.shuffle(EXtrrxnsprune)
   253                                                   while EXtrrxnsprune:
   254                                                       rxn2 = EXtrrxnsprune.pop()
   255                                                       try:
   256                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   257                                                                             repetition, biomassRxn, lb_biomass)
   258                                                           EXtrrxnsprune2 = []
   259                                                           for k in mTemp1.idRs:
   260                                                               if k in EXtrrxnsprune:
   261                                                                   EXtrrxnsprune2.append(k)
   262                                                           random.shuffle(EXtrrxnsprune2)
   263                                                           EXtrrxnsprune = EXtrrxnsprune2
   264                                                       except NameError:
   265                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   266                                                                             repetition, biomassRxn, lb_biomass)
   267                                                           EXtrrxnsprune2 = []
   268                                                           for k in mTemp1.idRs:
   269                                                               if k in EXtrrxnsprune:
   270                                                                   EXtrrxnsprune2.append(k)
   271                                                           random.shuffle(EXtrrxnsprune2)
   272                                                           EXtrrxnsprune = EXtrrxnsprune2
   273                                           
   274         1            1      1.0      0.0      prunableRxns = []
   275         1            0      0.0      0.0      try:
   276         1            4      4.0      0.0          for j in mTemp1.idRs:
   277                                                       if j not in list(cH):
   278                                                           if j not in EXrxns:
   279                                                               if j not in EXtrrxns:
   280                                                                   if j not in Othertrrxns:
   281                                                                       prunableRxns.append(j)
   282         1            2      2.0      0.0      except NameError:
   283       747          410      0.5      0.0          for j in m.idRs:
   284       746         3806      5.1      0.0              if j not in list(cH):
   285       397          213      0.5      0.0                  if j not in EXrxns:
   286       397          221      0.6      0.0                      if j not in EXtrrxns:
   287       397          210      0.5      0.0                          if j not in Othertrrxns:
   288       397          249      0.6      0.0                              prunableRxns.append(j)
   289         1          240    240.0      0.0      random.shuffle(prunableRxns)
   290       176          135      0.8      0.0      while prunableRxns:
   291       175          185      1.1      0.0          rxn3 = prunableRxns.pop()
   292       175          106      0.6      0.0          try:
   293       175          131      0.7      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   294       174     72970138 419368.6     98.2                                repetition, biomassRxn, lb_biomass)
   295       174          245      1.4      0.0              prunableRxns2 = []
   296     89385        49860      0.6      0.1              for k in mTemp1.idRs:
   297     89211       117309      1.3      0.2                  if k in prunableRxns:
   298     20016        15662      0.8      0.0                      prunableRxns2.append(k)
   299       174        13685     78.6      0.0              random.shuffle(prunableRxns2)
   300       174          210      1.2      0.0              prunableRxns = prunableRxns2
   301                                                       #prunableRxns2_appended = prunableRxns.append()
   302                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   303                                                       #for k in mTemp1.idRs:
   304                                                       #    if k in prunableRxns:
   305                                                       #        prunableRxns2.append(k)
   306                                                       #random.shuffle(prunableRxns2_appended)
   307                                                       #prunableRxns = prunableRxns2_appended
   308         1            1      1.0      0.0          except NameError:
   309         1            0      0.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   310         1      1167424 1167424.0      1.6                                repetition, biomassRxn, lb_biomass)
   311         1            1      1.0      0.0              prunableRxns2 = []
   312       646          385      0.6      0.0              for k in mTemp1.idRs:
   313       645         2032      3.2      0.0                  if k in prunableRxns:
   314       296          200      0.7      0.0                      prunableRxns2.append(k)
   315         1          204    204.0      0.0              random.shuffle(prunableRxns2)
   316         1            2      2.0      0.0              prunableRxns = prunableRxns2
   317                                                       #prunableRxns2_appended = prunableRxns.append()
   318                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   319                                                       #random.shuffle(prunableRxns2_appended)
   320                                                       #prunableRxns = prunableRxns2_appended
   321                                                       #for k in mTemp1.idRs:
   322                                                       #    if k in prunableRxns:
   323                                                       #        prunableRxns2.append(k)
   324                                                       #random.shuffle(prunableRxns2)
   325                                                       #prunableRxns = prunableRxns2
   326         1            1      1.0      0.0      return mTemp1.idRs

Total time: 0.000196 s
File: utilities.py
Function: exportPickle at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def exportPickle(obj, fileName, mode = 'wb', protocol = -1):
    36                                               """
    37                                               Exports an object as a pickle file. By default it writes as binary (wb).
    38                                               Setting mode allows other ways of opening the file (e.g. mode = 'w')
    39                                               """
    40         1           13     13.0      6.6      import cPickle as pickle
    41         1           34     34.0     17.3      f = open(fileName, mode)
    42         1          136    136.0     69.4      pickle.dump(obj, f, protocol = -1)
    43         1           13     13.0      6.6      f.close()

