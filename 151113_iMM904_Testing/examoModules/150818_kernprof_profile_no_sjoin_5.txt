set(['R_LPP_SC', 'R_2MBALDtm', 'R_ALCD22yi', 'R_HISt2r', 'R_ALCD24xim', 'R_EX_pap_e_', 'R_PAK_SC', 'R_FBP26', 'R_ASNt7', 'R_LEUt6', 'R_LEUt7', 'R_EX_iamac_e_', 'R_G6PDH2', 'R_DNMPPA', 'R_CITt2r', 'R_EX_gam6p_e_', 'R_FTHFCLm', 'R_ALCD2irm', 'R_ATPATF1', 'R_DIAT', 'R_PHEACt', 'R_PI35BP5P_SC', 'R_ACESt', 'R_ILEt6', 'R_ILEt7', 'R_DPR', 'R_DNTPPA', 'R_PAN4Ptm', 'R_IAMOHtm', 'R_D_LACDm', 'R_GLUt7m', 'R_P5CDm', 'R_PYDAMK', 'R_PMI12346PS', 'R_EX_ergst_e_', 'R_EX_aces_e_', 'R_BPNT', 'R_EX_ibutac_e_', 'R_EX_4abut_e_', 'R_EX_oaa_e_', 'R_ALCD23yi', 'R_PMI12346PH', 'R_EX_3c3hmp_e_', 'R_HYPOE', 'R_FDNG', 'R_ETOHtm', 'R_IBUTACt', 'R_NADPPPSm', 'R_ALCD25yi', 'R_POLYAO2', 'R_PI3P5K_SC', 'R_ALCD22xim', 'R_EX_pacald_e_', 'R_PAPtm', 'R_PMI1346PH', 'R_GLCGSDv', 'R_PI45BP5P_SC', 'R_3C3HMPt', 'R_PMI1346PS', 'R_GLYOX', 'R_PFK26', 'R_EX_3mop_e_', 'R_TYRTAim', 'R_DRTPPD', 'R_PMDPHT', 'R_13BGH', 'R_EX_pheac_e_', 'R_NTD5', 'R_NTD7', 'R_NTD6', 'R_GLNt7', 'R_GLNt6', 'R_ERGSTt', 'R_PDE1', 'R_RNDR4', 'R_OAAt', 'R_PACALDtm', 'R_EX_ac_e_', 'R_ACHLE2', 'R_ACHLE3', 'R_ACHLE1', 'R_GAM6Pt', 'R_LGTHL', 'R_2OBUTtm', 'R_HSDyi', 'R_ALCD24yi', 'R_NTD1', 'R_OHACT1', 'R_OHACT2', 'R_OHACT3', 'R_OHACT4', 'R_OHACT5', 'R_DROPPRy', 'R_EX_2mbac_e_', 'R_D_LACDcm', 'R_2MBTOHtm', 'R_DB4PS', 'R_GLYCt2', 'R_SBT_Dt', 'R_3MBALDtm', 'R_PAPt', 'R_TMDPP', 'R_SPRMS', 'R_MEVK1', 'R_MEVK3', 'R_MEVK2', 'R_EX_akg_e_', 'R_PPNDH', 'R_NADKm', 'R_ACALDt', 'R_PUNP2', 'R_ALDD2xm', 'R_IBUTOHtm', 'R_2PHETOHtm', 'R_D_LACt2', 'R_THYMt3r', 'R_ICDHy', 'R_ALCD23xim', 'R_ASNt6', 'R_EX_sbt_D_e_', 'R_IAMACt', 'R_TYRt2m', 'R_CYSTS', 'R_G3PD1ir', 'R_ALCD25xim', 'R_GLCNtv', 'R_ACPSm', 'R_EX_lac_D_e_', 'R_EX_thym_e_', 'R_RNDR2', 'R_RNDR3', 'R_RNDR1', 'R_GTPCII', 'R_FOLD3m', 'R_EX_cit_e_', 'R_2MPPALtm', 'R_TYRt7', 'R_TYRt6', 'R_DCTPD', 'R_PI4P5K_SC', 'R_TMDK1', 'R_HPPKm', 'R_PACALDt', 'R_RBFSb', 'R_RBFSa', 'R_EX_acald_e_', 'R_AP4AHr', 'R_EX_pyr_e_', 'R_ABUTt2r', 'R_THFATm', 'R_3MOPt', 'R_GLUK', 'R_2MBACt'])
set(['R_FAS80COA_L', 'R_HETZK', 'R_ACOAHim', 'R_DKMPPD2', 'R_PPNCL2', 'R_TMN', 'R_KYN', 'R_SPMDAT1', 'R_PANTS', 'R_ID3ACALDtm', 'R_ALCD26xim', 'R_ALDD22x', 'R_EX_glx_e_', 'R_IND3ETHtm', 'R_MTRI', 'R_UNK3', 'R_AABTN', 'R_DPCOAK', 'R_TREHv', 'R_FECOSTt', 'R_SAM24MT', 'R_EX_mal_L_e_', 'R_FACOAL140', 'R_MOHMT', 'R_C22STDS', 'R_FAS140COA', 'R_MTAP', 'R_TTDCAtr', 'R_POLYAO', 'R_NABTNO', 'R_SPMS', 'R_GLXt', 'R_ASPGLU2m', 'R_PANTtm', 'R_MDRPD', 'R_DPRm', 'R_EX_fecost_e_', 'R_ADPT', 'R_C5STDS', 'R_FAS100COA', 'R_APRTO2', 'R_FAS120COA', 'R_PNTK', 'R_ACCOACr', 'R_TREt2v', 'R_GLCtv', 'R_PTPATi', 'R_ADMDC', 'R_POLYAO3', 'R_PPCDC', 'R_C8STI', 'R_EX_ttdca_e_'])
set([])
R_GALT
exception 1
not all active 1
R_2MPPALt
set(['R_UGLT', 'R_GUAD', 'R_GLYGS', 'R_GBEZ', 'R_EX_2mppal_e_', 'R_GLUSx'])
not all active 1
set(['R_SUCCt2r', 'R_NTD9', 'R_XANt', 'R_EX_xan_e_', 'R_EX_succ_e_', 'R_ME2m'])
set(['R_INSK', 'R_TREH'])
set(['R_D_LACtm', 'R_DHORDi'])
not all active 1
exception 1
not all active 1
not all active 1
set(['R_4HBZtm'])
not all active 1
exception 1
not all active 1
set(['R_4ABZt'])
set(['R_HCO3En', 'R_HCO3tn'])
set(['R_DHAD1m', 'R_ACLSm'])
set(['R_DHORDfum', 'R_NDPK9'])
set(['R_EX_hxan_e_'])
not all active 1
exception 1
set(['R_GLUt2r'])
set([])
set(['R_GLYt2r'])
set(['R_PUNP3'])
not all active 1
set([])
set([])
set(['R_THRt2r'])
not all active 1
exception 1
set(['R_EX_id3acald_e_'])
set(['R_EX_trp_L_e_'])
set(['R_PROtm', 'R_G5SADrm', 'R_PYR5CDm'])
set(['R_AKGDam'])
set(['R_TRDOXtp', 'R_TRDRDtp', 'R_GLUN'])
exception 1
exception 1
set(['R_MALOAAtp'])
not all active 1
not all active 1
set(['R_SERt2r'])
exception 1
set(['R_THMt2'])
set(['R_AKGt2r', 'R_AKGMAL'])
exception 1
exception 1
not all active 1
set(['R_DTTPt'])
R_EX_orn_e_
R_PDHcm
not all active 1
not all active 1
exception 1
set(['R_EX_ala_L_e_', 'R_ORNt2r'])
exception 1
set(['R_ACtr'])
exception 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
set([])
set(['R_EX_arg_L_e_'])
not all active 1
set([])
set([])
set([])
set([])
exception 1
set(['R_ME1m'])
exception 1
not all active 1
set(['R_ASNNe'])
exception 1
not all active 1
set(['R_TYRt2r'])
set(['R_EX_ile_L_e_'])
exception 1
exception 1
not all active 1
set(['R_ASPt2n'])
not all active 1
exception 1
not all active 1
not all active 1
set(['R_EX_2mbald_e_'])
exception 1
not all active 1
exception 1
exception 1
exception 1
set([])
set([])
set([])
set(['R_G6PDA', 'R_EX_for_e_'])
exception 1
not all active 1
not all active 1
not all active 1
exception 1
exception 1
exception 1
not all active 1
exception 1
not all active 1
set([])
exception 1
not all active 1
not all active 1
exception 1
exception 1
exception 1
set([])
exception 1
exception 1
exception 1
exception 1
set(['R_EX_3mbald_e_'])
not all active 1
exception 1
exception 1
exception 1
exception 1
exception 1
not all active 1
exception 1
exception 1
not all active 1
not all active 1
Wrote profile results to mba_no_fork.py.lprof
Timer unit: 1e-06 s

Total time: 10.8809 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       194          959      4.9      0.0          from numpy import array
    98       194        13731     70.8      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       194        51110    263.5      0.5          self.guro.setParam('OutputFlag', 0) 
   101     91976        55690      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102     91782      2052791     22.4     18.9              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       194        27452    141.5      0.3          self.guro.update()
   104                                                   # adding constraints
   105     78651       129472      1.6      1.2          for i, row in enumerate(self.S.toarray()):
   106     78457       312935      4.0      2.9              nz = row.nonzero()[0]
   107     78457      2819042     35.9     25.9              pair = zip(row[nz], array(self.idRs)[nz])
   108     78457        46536      0.6      0.4              s = ''
   109    311896       172201      0.6      1.6              for p in pair:
   110    233439       455388      2.0      4.2                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111     78457        71871      0.9      0.7              s = s.rstrip(' + ')
   112     78457        46718      0.6      0.4              s += ' == %s' % 0.
   113     78457      4625050     59.0     42.5              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 24.4759 s
File: mba_no_fork.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       194          195      1.0      0.0      act = set()
    71       194         6498     33.5      0.0      arrayIdRs = array(cbm.idRs[:])
    72       194     11657316  60089.3     47.6      init = cbm.initLp()
    73       194          128      0.7      0.0      init 
    74       194          151      0.8      0.0      if rl:
    75       194          100      0.5      0.0          idRs = rl
    76                                               else:
    77                                                   idRs = cbm.idRs[:]
    78                                               # maximizing all reactions at once
    79                                               # reseting the objective
    80       194         6420     33.1      0.0      cbm.guro.setObjective(0)
    81                                               # setting the objective
    82       194          138      0.7      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    83     91976        64518      0.7      0.3      for var in cbm.guro.getVars():
    84     91782       246598      2.7      1.0          s += 'cbm.%s, ' % var.varName
    85       194          615      3.2      0.0      s = s.rstrip(', ')
    86       194          383      2.0      0.0      s += '])'
    87       194       160090    825.2      0.7      exec s
    88                                               #EG Initially set the objective to maximize
    89       194        36388    187.6      0.1      cbm.guro.setObjective(cbm.linobj)#1 for maximize
    90       194       301833   1555.8      1.2      cbm.guro.optimize()
    91     74136       126398      1.7      0.5      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    92       154         1787     11.6      0.0      indices = (sol > thresh).nonzero()[0]
    93       154         4887     31.7      0.0      act.update(arrayIdRs[indices])
    94       154         6111     39.7      0.0      idRs = list(set(idRs) - act)
    95                                               # maximizing
    96     25650        13834      0.5      0.1      for rxn in idRs:
    97     25496        15868      0.6      0.1          if rxn not in act:
    98                                                   #EG Reduce the number of reactions that need to be investigated
    99                                                   #based off of upper boundary constraints
   100      7212        39048      5.4      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   101                                                           # reseting the objective
   102      7212       179267     24.9      0.7                  cbm.guro.setObjective(0)
   103      7212       396814     55.0      1.6                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   104      7212      4244152    588.5     17.3                  cbm.guro.optimize()
   105   3495978      5665382      1.6     23.1                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   106      7212        61826      8.6      0.3                  indices = (sol > thresh).nonzero()[0]
   107                                                           #act2 = act.copy()
   108      7212       272278     37.8      1.1                  act.update(arrayIdRs[indices])
   109                                                           #if act2 != act:
   110                                                               #print "added 1"
   111                                                               #if rxn in act:
   112                                                                   #print rxn
   113       154         2723     17.7      0.0      idRs = list(set(idRs) - act)
   114                                               # minimizing
   115       617          453      0.7      0.0      for rxn in idRs:
   116       463          322      0.7      0.0          if rxn not in act:
   117                                                   #EG Reduce the number of reactions that need to be investigated
   118                                                   #based off of lower boundary constraints
   119       463         1750      3.8      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   120                                                           # reseting the objective
   121       463        11428     24.7      0.0                  cbm.guro.setObjective(0)
   122       463        25280     54.6      0.1                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   123       463       180177    389.2      0.7                  cbm.guro.optimize()
   124    225639       367191      1.6      1.5                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   125    225639       361511      1.6      1.5                  sol_no_absolute = array([v.x for v in cbm.guro.getVars()])
   126       463         4364      9.4      0.0                  indices = (sol > thresh).nonzero()[0]
   127                                                           #act2 = act.copy()
   128       463        11591     25.0      0.0                  act.update(arrayIdRs[indices])
   129                                                           #if act2 != act:
   130                                                               #print "added 2"
   131                                                               #if rxn in act:
   132                                                                   #print rxn
   133                                                                   #print sol
   134                                                                   #print sol_no_absolute
   135                                                                   #print indices
   136                                                                   #print arrayIdRs
   137       154           87      0.6      0.0      return act

Total time: 57.7672 s
File: mba_no_fork.py
Function: pruneRxn at line 139

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   139                                           @profile
   140                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   141                                                        lb_biomass):
   142       137           93      0.7      0.0      try:
   143                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   144                                                   #or if the biomass flux becomes inactive, stop pruning.
   145       137           85      0.6      0.0          rxntodelete = rxn
   146       137      8005399  58433.6     13.9          m0 = deleteCbmRxns(cbm, rxntodelete)
   147                                                   #NOTE the threshold for is set a bit higher for cH rxns
   148       137     18143603 132435.1     31.4          act = findActiveRxns(m0, thresh, cH)
   149        97         3026     31.2      0.0          cH_act = cH & act
   150        97          832      8.6      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   151        39          129      3.3      0.0              print "not all active 1"
   152        39           26      0.7      0.0              return cbm
   153                                                   #######################################################################
   154                                                   # INPUTS
   155        58           35      0.6      0.0          eps = 1E-10
   156        58           32      0.6      0.0          activityThreshold = 1E-10
   157        58           36      0.6      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   158                                                   #######################################################################
   159                                                   # STATEMENTS
   160        58        15195    262.0      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   161        58         3625     62.5      0.0          hfr = hfr & set(m0.idRs)
   162                                                   #forcing biomass production
   163        58          315      5.4      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   164                                                   #minimizingg the sum of fluxes
   165        58       605130  10433.3      1.0          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   166        58      8702725 150047.0     15.1          mtry1result.initMipGurobi()
   167        58       742162  12795.9      1.3          mtry1result.minSumFluxes_gurobi()
   168                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   169                                                   #function, so that the reactants and products could be written out
   170        58       664509  11457.1      1.2          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   171        43           39      0.9      0.0      except:
   172        43          133      3.1      0.0          print "exception 1"
   173        43           29      0.7      0.0          return cbm
   174                                                   #EG Identify the reactions that became inactive after the
   175                                                   #reaction was deleted. If extra deleted reactions cause the
   176                                                   #model to be unsolvable, or if extra deleted inactive reactions
   177                                                   #cause any of the hfrs to become inactive, or if a solution
   178                                                   #cannot be obtained with a biomass flux, only delete the one
   179                                                   #reaction. Otherwise, delete the inactive reactions.
   180        55           69      1.3      0.0      try:
   181        55         4315     78.5      0.0          inact = set(m0.idRs) - act - cH
   182        55      3335457  60644.7      5.8          m1 = deleteCbmRxns(m0, inact)
   183        55      8204952 149180.9     14.2          act2 = findActiveRxns(m1, thresh, cH)
   184        55         1607     29.2      0.0          cH_act2 = cH & act2
   185        55          436      7.9      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   186         4           13      3.2      0.0              print rxntodelete
   187         4            2      0.5      0.0              return m0
   188                                                   ###################################################################
   189                                                   # INPUTS
   190        51           26      0.5      0.0          eps = 1E-10
   191        51           32      0.6      0.0          activityThreshold = 1E-10
   192        51           32      0.6      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   193                                                   ###################################################################
   194                                                   # STATEMENTS
   195        51        13025    255.4      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   196        51         3078     60.4      0.0          hfr = hfr & set(m1.idRs)
   197                                                   #forcing biomass production
   198        51          275      5.4      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   199                                                   #minimizing the sum of fluxes
   200        51       532917  10449.4      0.9          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   201        51      7494199 146945.1     13.0          mtry2result.initMipGurobi()
   202        51       650023  12745.5      1.1          mtry2result.minSumFluxes_gurobi()
   203                                                   #EG Added activityThreshold and the m1.rxns dictionary
   204                                                   #to the function, so that the reactants and products could
   205                                                   #be written out
   206        51       639065  12530.7      1.1          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   207        51          516     10.1      0.0          print inact
   208        51           42      0.8      0.0          return m1
   209                                               except:
   210                                                   print "exception 2"
   211                                                   return m0

Total time: 58.0914 s
File: mba_no_fork.py
Function: iterativePrunning at line 216

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   216                                           @profile
   217                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   218                                                                 repetition, thresh = 1E-10, EXrxns = [],
   219                                                                 EXtrrxns = [], Othertrrxns = []):
   220                                               """
   221                                               solver can be 'cplex', 'glpk' or 'gurobi'
   222                                               """
   223         1            2      2.0      0.0      if len(EXrxns) > 0:
   224                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   225                                                   random.shuffle(EXrxnsprune)
   226                                                   while EXrxnsprune:
   227                                                       rxn1 = EXrxnsprune.pop()
   228                                                       try:
   229                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   230                                                                             repetition, biomassRxn, lb_biomass)
   231                                                           EXrxnsprune2 = []
   232                                                           for k in mTemp1.idRs:
   233                                                               if k in EXrxnsprune:
   234                                                                   EXrxnsprune2.append(k)
   235                                                           random.shuffle(EXrxnsprune2)
   236                                                           EXrxnsprune = EXrxnsprune2
   237                                                       except NameError:
   238                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   239                                                                             repetition, biomassRxn, lb_biomass)
   240                                                           EXrxnsprune2 = []
   241                                                           for k in mTemp1.idRs:
   242                                                               if k in EXrxnsprune:
   243                                                                   EXrxnsprune2.append(k)
   244                                                           random.shuffle(EXrxnsprune2)
   245                                                           EXrxnsprune = EXrxnsprune2
   246         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   247                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   248                                                   EXtrrxnsprunelist = []
   249                                                   for j in EXtrrxnsprune:
   250                                                       if j in mTemp1.idRs:
   251                                                           EXtrrxnsprunelist.append(j)
   252                                                   random.shuffle(EXtrrxnsprune)
   253                                                   while EXtrrxnsprune:
   254                                                       rxn2 = EXtrrxnsprune.pop()
   255                                                       try:
   256                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   257                                                                             repetition, biomassRxn, lb_biomass)
   258                                                           EXtrrxnsprune2 = []
   259                                                           for k in mTemp1.idRs:
   260                                                               if k in EXtrrxnsprune:
   261                                                                   EXtrrxnsprune2.append(k)
   262                                                           random.shuffle(EXtrrxnsprune2)
   263                                                           EXtrrxnsprune = EXtrrxnsprune2
   264                                                       except NameError:
   265                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   266                                                                             repetition, biomassRxn, lb_biomass)
   267                                                           EXtrrxnsprune2 = []
   268                                                           for k in mTemp1.idRs:
   269                                                               if k in EXtrrxnsprune:
   270                                                                   EXtrrxnsprune2.append(k)
   271                                                           random.shuffle(EXtrrxnsprune2)
   272                                                           EXtrrxnsprune = EXtrrxnsprune2
   273                                           
   274         1            1      1.0      0.0      prunableRxns = []
   275         1            0      0.0      0.0      try:
   276         1            4      4.0      0.0          for j in mTemp1.idRs:
   277                                                       if j not in list(cH):
   278                                                           if j not in EXrxns:
   279                                                               if j not in EXtrrxns:
   280                                                                   if j not in Othertrrxns:
   281                                                                       prunableRxns.append(j)
   282         1            1      1.0      0.0      except NameError:
   283       747          346      0.5      0.0          for j in m.idRs:
   284       746         3779      5.1      0.0              if j not in list(cH):
   285       397          195      0.5      0.0                  if j not in EXrxns:
   286       397          192      0.5      0.0                      if j not in EXtrrxns:
   287       397          210      0.5      0.0                          if j not in Othertrrxns:
   288       397          219      0.6      0.0                              prunableRxns.append(j)
   289         1          252    252.0      0.0      random.shuffle(prunableRxns)
   290       138          104      0.8      0.0      while prunableRxns:
   291       137          148      1.1      0.0          rxn3 = prunableRxns.pop()
   292       137           74      0.5      0.0          try:
   293       137           97      0.7      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   294       136     56835897 417911.0     97.8                                repetition, biomassRxn, lb_biomass)
   295       136          162      1.2      0.0              prunableRxns2 = []
   296     63312        32491      0.5      0.1              for k in mTemp1.idRs:
   297     63176        66995      1.1      0.1                  if k in prunableRxns:
   298     11211         8459      0.8      0.0                      prunableRxns2.append(k)
   299       136         8372     61.6      0.0              random.shuffle(prunableRxns2)
   300       136          162      1.2      0.0              prunableRxns = prunableRxns2
   301                                                       #prunableRxns2_appended = prunableRxns.append()
   302                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   303                                                       #for k in mTemp1.idRs:
   304                                                       #    if k in prunableRxns:
   305                                                       #        prunableRxns2.append(k)
   306                                                       #random.shuffle(prunableRxns2_appended)
   307                                                       #prunableRxns = prunableRxns2_appended
   308         1            1      1.0      0.0          except NameError:
   309         1            1      1.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   310         1      1131041 1131041.0      1.9                                repetition, biomassRxn, lb_biomass)
   311         1            1      1.0      0.0              prunableRxns2 = []
   312       593          302      0.5      0.0              for k in mTemp1.idRs:
   313       592         1627      2.7      0.0                  if k in prunableRxns:
   314       243          143      0.6      0.0                      prunableRxns2.append(k)
   315         1          156    156.0      0.0              random.shuffle(prunableRxns2)
   316         1            1      1.0      0.0              prunableRxns = prunableRxns2
   317                                                       #prunableRxns2_appended = prunableRxns.append()
   318                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   319                                                       #random.shuffle(prunableRxns2_appended)
   320                                                       #prunableRxns = prunableRxns2_appended
   321                                                       #for k in mTemp1.idRs:
   322                                                       #    if k in prunableRxns:
   323                                                       #        prunableRxns2.append(k)
   324                                                       #random.shuffle(prunableRxns2)
   325                                                       #prunableRxns = prunableRxns2
   326         1            1      1.0      0.0      return mTemp1.idRs

