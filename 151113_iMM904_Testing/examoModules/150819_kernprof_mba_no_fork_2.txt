added 2
added 2
R_ASNt2r
added 2
R_ASNt2r
Wrote profile results to mba_no_fork.py.lprof
Timer unit: 1e-06 s

Total time: 9.90405 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       184          859      4.7      0.0          from numpy import array
    98       184        12465     67.7      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       184        46535    252.9      0.5          self.guro.setParam('OutputFlag', 0) 
   101     86866        48569      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102     86682      1855148     21.4     18.7              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       184        25351    137.8      0.3          self.guro.update()
   104                                                   # adding constraints
   105     73463       117611      1.6      1.2          for i, row in enumerate(self.S.toarray()):
   106     73279       274274      3.7      2.8              nz = row.nonzero()[0]
   107     73279      2575693     35.1     26.0              pair = zip(row[nz], array(self.idRs)[nz])
   108     73279        42839      0.6      0.4              s = ''
   109    293411       158023      0.5      1.6              for p in pair:
   110    220132       438413      2.0      4.4                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111     73279        64834      0.9      0.7              s = s.rstrip(' + ')
   112     73279        41569      0.6      0.4              s += ' == %s' % 0.
   113     73279      4201870     57.3     42.4              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 23.2693 s
File: mba_no_fork.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       184          202      1.1      0.0      act = set()
    71       184         5898     32.1      0.0      arrayIdRs = array(cbm.idRs[:])
    72       184     10576267  57479.7     45.5      init = cbm.initLp()
    73       184          129      0.7      0.0      init 
    74       184          157      0.9      0.0      if rl:
    75       184           96      0.5      0.0          idRs = rl
    76                                               else:
    77                                                   idRs = cbm.idRs[:]
    78                                               # maximizing all reactions at once
    79                                               # reseting the objective
    80       184         5879     32.0      0.0      cbm.guro.setObjective(0)
    81                                               # setting the objective
    82       184          109      0.6      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    83     86866        60454      0.7      0.3      for var in cbm.guro.getVars():
    84     86682       228869      2.6      1.0          s += 'cbm.%s, ' % var.varName
    85       184          590      3.2      0.0      s = s.rstrip(', ')
    86       184          345      1.9      0.0      s += '])'
    87       184       144908    787.5      0.6      exec s
    88                                               #EG Initially set the objective to maximize
    89       184        34563    187.8      0.1      cbm.guro.setObjective(cbm.linobj)#1 for maximize
    90       184       291817   1586.0      1.3      cbm.guro.optimize()
    91     76090       127863      1.7      0.5      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    92       160         1851     11.6      0.0      indices = (sol > thresh).nonzero()[0]
    93       160         4973     31.1      0.0      act.update(arrayIdRs[indices])
    94       160         6163     38.5      0.0      idRs = list(set(idRs) - act)
    95                                               # maximizing
    96     27688        14935      0.5      0.1      for rxn in idRs:
    97     27528        16884      0.6      0.1          if rxn not in act:
    98                                                   #EG Reduce the number of reactions that need to be investigated
    99                                                   #based off of upper boundary constraints
   100      7522        38116      5.1      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   101                                                           # reseting the objective
   102      7522       182982     24.3      0.8                  cbm.guro.setObjective(0)
   103      7522       399789     53.1      1.7                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   104      7522      4427862    588.7     19.0                  cbm.guro.optimize()
   105   3594216      5751622      1.6     24.7                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   106      7522        64100      8.5      0.3                  indices = (sol > thresh).nonzero()[0]
   107                                                           #act2 = act.copy()
   108      7522       247160     32.9      1.1                  act.update(arrayIdRs[indices])
   109                                                           #if act2 != act:
   110                                                               #print "added 1"
   111                                                               #if rxn in act:
   112                                                                   #print rxn
   113       160         2732     17.1      0.0      idRs = list(set(idRs) - act)
   114                                               # minimizing
   115       654          435      0.7      0.0      for rxn in idRs:
   116       494          296      0.6      0.0          if rxn not in act:
   117                                                   #EG Reduce the number of reactions that need to be investigated
   118                                                   #based off of lower boundary constraints
   119       494         1847      3.7      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   120                                                           # reseting the objective
   121       494        11908     24.1      0.1                  cbm.guro.setObjective(0)
   122       494        27595     55.9      0.1                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   123       494       190967    386.6      0.8                  cbm.guro.optimize()
   124    234733       373468      1.6      1.6                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   125       494         4221      8.5      0.0                  indices = (sol > thresh).nonzero()[0]
   126       494         5460     11.1      0.0                  act2 = act.copy()
   127       494        11924     24.1      0.1                  act.update(arrayIdRs[indices])
   128       494         3800      7.7      0.0                  if act2 != act:
   129         3           25      8.3      0.0                      print "added 2"
   130         3            3      1.0      0.0                      if rxn in act:
   131         2            2      1.0      0.0                          print rxn
   132       160           68      0.4      0.0      return act

Total time: 52.9086 s
File: mba_no_fork.py
Function: pruneRxn at line 134

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   134                                           @profile
   135                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   136                                                        lb_biomass):
   137       129           91      0.7      0.0      try:
   138                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   139                                                   #or if the biomass flux becomes inactive, stop pruning.
   140       129           80      0.6      0.0          rxntodelete = rxn
   141       129      7306611  56640.4     13.8          m0 = deleteCbmRxns(cbm, rxntodelete)
   142                                                   #NOTE the threshold for is set a bit higher for cH rxns
   143       129     17601683 136447.2     33.3          act = findActiveRxns(m0, thresh, cH)
   144       105         3122     29.7      0.0          cH_act = cH & act
   145       105          876      8.3      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   146                                                       #print "not all active 1"
   147        52           22      0.4      0.0              return cbm
   148                                                   #######################################################################
   149                                                   # INPUTS
   150        53           27      0.5      0.0          eps = 1E-10
   151        53           28      0.5      0.0          activityThreshold = 1E-10
   152        53           28      0.5      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   153                                                   #######################################################################
   154                                                   # STATEMENTS
   155        53        14043    265.0      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   156        53         3340     63.0      0.0          hfr = hfr & set(m0.idRs)
   157                                                   #forcing biomass production
   158        53          276      5.2      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   159                                                   #minimizingg the sum of fluxes
   160        53       540683  10201.6      1.0          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   161        53      7590993 143226.3     14.3          mtry1result.initMipGurobi()
   162        53       665483  12556.3      1.3          mtry1result.minSumFluxes_gurobi()
   163                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   164                                                   #function, so that the reactants and products could be written out
   165        53       604636  11408.2      1.1          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   166        24           16      0.7      0.0      except:
   167                                                   #print "exception 1"
   168        24           17      0.7      0.0          return cbm
   169                                                   #EG Identify the reactions that became inactive after the
   170                                                   #reaction was deleted. If extra deleted reactions cause the
   171                                                   #model to be unsolvable, or if extra deleted inactive reactions
   172                                                   #cause any of the hfrs to become inactive, or if a solution
   173                                                   #cannot be obtained with a biomass flux, only delete the one
   174                                                   #reaction. Otherwise, delete the inactive reactions.
   175        53           59      1.1      0.0      try:
   176        53         4036     76.2      0.0          inact = set(m0.idRs) - act - cH
   177        53      3078214  58079.5      5.8          m1 = deleteCbmRxns(m0, inact)
   178        53      7597836 143355.4     14.4          act2 = findActiveRxns(m1, thresh, cH)
   179        53         1545     29.2      0.0          cH_act2 = cH & act2
   180        53          426      8.0      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   181                                                       #print rxntodelete
   182         8            3      0.4      0.0              return m0
   183                                                   ###################################################################
   184                                                   # INPUTS
   185        45           27      0.6      0.0          eps = 1E-10
   186        45           17      0.4      0.0          activityThreshold = 1E-10
   187        45           32      0.7      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   188                                                   ###################################################################
   189                                                   # STATEMENTS
   190        45        11610    258.0      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   191        45         2664     59.2      0.0          hfr = hfr & set(m1.idRs)
   192                                                   #forcing biomass production
   193        45          237      5.3      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   194                                                   #minimizing the sum of fluxes
   195        45       440404   9786.8      0.8          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   196        45      6379100 141757.8     12.1          mtry2result.initMipGurobi()
   197        45       546471  12143.8      1.0          mtry2result.minSumFluxes_gurobi()
   198                                                   #EG Added activityThreshold and the m1.rxns dictionary
   199                                                   #to the function, so that the reactants and products could
   200                                                   #be written out
   201        45       513771  11417.1      1.0          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   202                                                   #print inact
   203        45           55      1.2      0.0          return m1
   204                                               except:
   205                                                   #print "exception 2"
   206                                                   return m0

Total time: 53.1963 s
File: mba_no_fork.py
Function: iterativePrunning at line 211

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   211                                           @profile
   212                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   213                                                                 repetition, thresh = 1E-10, EXrxns = [],
   214                                                                 EXtrrxns = [], Othertrrxns = []):
   215                                               """
   216                                               solver can be 'cplex', 'glpk' or 'gurobi'
   217                                               """
   218         1            1      1.0      0.0      if len(EXrxns) > 0:
   219                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   220                                                   random.shuffle(EXrxnsprune)
   221                                                   while EXrxnsprune:
   222                                                       rxn1 = EXrxnsprune.pop()
   223                                                       try:
   224                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   225                                                                             repetition, biomassRxn, lb_biomass)
   226                                                           EXrxnsprune2 = []
   227                                                           for k in mTemp1.idRs:
   228                                                               if k in EXrxnsprune:
   229                                                                   EXrxnsprune2.append(k)
   230                                                           random.shuffle(EXrxnsprune2)
   231                                                           EXrxnsprune = EXrxnsprune2
   232                                                       except NameError:
   233                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   234                                                                             repetition, biomassRxn, lb_biomass)
   235                                                           EXrxnsprune2 = []
   236                                                           for k in mTemp1.idRs:
   237                                                               if k in EXrxnsprune:
   238                                                                   EXrxnsprune2.append(k)
   239                                                           random.shuffle(EXrxnsprune2)
   240                                                           EXrxnsprune = EXrxnsprune2
   241         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   242                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   243                                                   EXtrrxnsprunelist = []
   244                                                   for j in EXtrrxnsprune:
   245                                                       if j in mTemp1.idRs:
   246                                                           EXtrrxnsprunelist.append(j)
   247                                                   random.shuffle(EXtrrxnsprune)
   248                                                   while EXtrrxnsprune:
   249                                                       rxn2 = EXtrrxnsprune.pop()
   250                                                       try:
   251                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   252                                                                             repetition, biomassRxn, lb_biomass)
   253                                                           EXtrrxnsprune2 = []
   254                                                           for k in mTemp1.idRs:
   255                                                               if k in EXtrrxnsprune:
   256                                                                   EXtrrxnsprune2.append(k)
   257                                                           random.shuffle(EXtrrxnsprune2)
   258                                                           EXtrrxnsprune = EXtrrxnsprune2
   259                                                       except NameError:
   260                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   261                                                                             repetition, biomassRxn, lb_biomass)
   262                                                           EXtrrxnsprune2 = []
   263                                                           for k in mTemp1.idRs:
   264                                                               if k in EXtrrxnsprune:
   265                                                                   EXtrrxnsprune2.append(k)
   266                                                           random.shuffle(EXtrrxnsprune2)
   267                                                           EXtrrxnsprune = EXtrrxnsprune2
   268                                           
   269         1            1      1.0      0.0      prunableRxns = []
   270         1            1      1.0      0.0      try:
   271         1            4      4.0      0.0          for j in mTemp1.idRs:
   272                                                       if j not in list(cH):
   273                                                           if j not in EXrxns:
   274                                                               if j not in EXtrrxns:
   275                                                                   if j not in Othertrrxns:
   276                                                                       prunableRxns.append(j)
   277         1            2      2.0      0.0      except NameError:
   278       747          356      0.5      0.0          for j in m.idRs:
   279       746         3647      4.9      0.0              if j not in list(cH):
   280       397          182      0.5      0.0                  if j not in EXrxns:
   281       397          178      0.4      0.0                      if j not in EXtrrxns:
   282       397          184      0.5      0.0                          if j not in Othertrrxns:
   283       397          211      0.5      0.0                              prunableRxns.append(j)
   284         1          234    234.0      0.0      random.shuffle(prunableRxns)
   285       130           72      0.6      0.0      while prunableRxns:
   286       129          129      1.0      0.0          rxn3 = prunableRxns.pop()
   287       129           59      0.5      0.0          try:
   288       129           80      0.6      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   289       128     51972892 406038.2     97.7                                repetition, biomassRxn, lb_biomass)
   290       128          161      1.3      0.0              prunableRxns2 = []
   291     59544        29979      0.5      0.1              for k in mTemp1.idRs:
   292     59416        61259      1.0      0.1                  if k in prunableRxns:
   293     10335         7265      0.7      0.0                      prunableRxns2.append(k)
   294       128         7178     56.1      0.0              random.shuffle(prunableRxns2)
   295       128          125      1.0      0.0              prunableRxns = prunableRxns2
   296                                                       #prunableRxns2_appended = prunableRxns.append()
   297                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   298                                                       #for k in mTemp1.idRs:
   299                                                       #    if k in prunableRxns:
   300                                                       #        prunableRxns2.append(k)
   301                                                       #random.shuffle(prunableRxns2_appended)
   302                                                       #prunableRxns = prunableRxns2_appended
   303         1            1      1.0      0.0          except NameError:
   304         1            0      0.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   305         1      1109899 1109899.0      2.1                                repetition, biomassRxn, lb_biomass)
   306         1            1      1.0      0.0              prunableRxns2 = []
   307       591          279      0.5      0.0              for k in mTemp1.idRs:
   308       590         1586      2.7      0.0                  if k in prunableRxns:
   309       241          137      0.6      0.0                      prunableRxns2.append(k)
   310         1          146    146.0      0.0              random.shuffle(prunableRxns2)
   311         1            2      2.0      0.0              prunableRxns = prunableRxns2
   312                                                       #prunableRxns2_appended = prunableRxns.append()
   313                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   314                                                       #random.shuffle(prunableRxns2_appended)
   315                                                       #prunableRxns = prunableRxns2_appended
   316                                                       #for k in mTemp1.idRs:
   317                                                       #    if k in prunableRxns:
   318                                                       #        prunableRxns2.append(k)
   319                                                       #random.shuffle(prunableRxns2)
   320                                                       #prunableRxns = prunableRxns2
   321         1            0      0.0      0.0      return mTemp1.idRs

Total time: 0.000191 s
File: utilities.py
Function: exportPickle at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def exportPickle(obj, fileName, mode = 'wb', protocol = -1):
    36                                               """
    37                                               Exports an object as a pickle file. By default it writes as binary (wb).
    38                                               Setting mode allows other ways of opening the file (e.g. mode = 'w')
    39                                               """
    40         1           11     11.0      5.8      import cPickle as pickle
    41         1           33     33.0     17.3      f = open(fileName, mode)
    42         1          134    134.0     70.2      pickle.dump(obj, f, protocol = -1)
    43         1           13     13.0      6.8      f.close()

