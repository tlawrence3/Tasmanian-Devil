added 2
Wrote profile results to mba_no_fork.py.lprof
Timer unit: 1e-06 s

Total time: 14.3336 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       232         1192      5.1      0.0          from numpy import array
    98       232        16814     72.5      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       232        61740    266.1      0.4          self.guro.setParam('OutputFlag', 0) 
   101    124272        72292      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102    124040      2689515     21.7     18.8              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       232        36207    156.1      0.3          self.guro.update()
   104                                                   # adding constraints
   105    102115       165183      1.6      1.2          for i, row in enumerate(self.S.toarray()):
   106    101883       419884      4.1      2.9              nz = row.nonzero()[0]
   107    101883      3911167     38.4     27.3              pair = zip(row[nz], array(self.idRs)[nz])
   108    101883        56739      0.6      0.4              s = ''
   109    414496       222822      0.5      1.6              for p in pair:
   110    312613       575191      1.8      4.0                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111    101883        91748      0.9      0.6              s = s.rstrip(' + ')
   112    101883        58166      0.6      0.4              s += ' == %s' % 0.
   113    101883      5954956     58.4     41.5              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 34.1056 s
File: mba_no_fork.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       232          261      1.1      0.0      act = set()
    71       232         8402     36.2      0.0      arrayIdRs = array(cbm.idRs[:])
    72       232     15257492  65765.1     44.7      init = cbm.initLp()
    73       232          166      0.7      0.0      init 
    74       232          184      0.8      0.0      if rl:
    75       232          134      0.6      0.0          idRs = rl
    76                                               else:
    77                                                   idRs = cbm.idRs[:]
    78                                               # maximizing all reactions at once
    79                                               # reseting the objective
    80       232         8162     35.2      0.0      cbm.guro.setObjective(0)
    81                                               # setting the objective
    82       232          150      0.6      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    83    124272        88080      0.7      0.3      for var in cbm.guro.getVars():
    84    124040       325789      2.6      1.0          s += 'cbm.%s, ' % var.varName
    85       232          759      3.3      0.0      s = s.rstrip(', ')
    86       232          486      2.1      0.0      s += '])'
    87       232       216541    933.4      0.6      exec s
    88                                               #EG Initially set the objective to maximize
    89       232        49041    211.4      0.1      cbm.guro.setObjective(cbm.linobj)#1 for maximize
    90       232       428844   1848.5      1.3      cbm.guro.optimize()
    91    116452       191333      1.6      0.6      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    92       217         2752     12.7      0.0      indices = (sol > thresh).nonzero()[0]
    93       217         6252     28.8      0.0      act.update(arrayIdRs[indices])
    94       217         8414     38.8      0.0      idRs = list(set(idRs) - act)
    95                                               # maximizing
    96     45079        23982      0.5      0.1      for rxn in idRs:
    97     44862        26822      0.6      0.1          if rxn not in act:
    98                                                   #EG Reduce the number of reactions that need to be investigated
    99                                                   #based off of upper boundary constraints
   100      9907        58217      5.9      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   101                                                           # reseting the objective
   102      9907       256371     25.9      0.8                  cbm.guro.setObjective(0)
   103      9907       551710     55.7      1.6                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   104      9907      7190570    725.8     21.1                  cbm.guro.optimize()
   105   5335869      8481627      1.6     24.9                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   106      9907        93645      9.5      0.3                  indices = (sol > thresh).nonzero()[0]
   107                                                           #act2 = act.copy()
   108      9907       415357     41.9      1.2                  act.update(arrayIdRs[indices])
   109                                                           #if act2 != act:
   110                                                               #print "added 1"
   111                                                               #if rxn in act:
   112                                                                   #print rxn
   113       217         4233     19.5      0.0      idRs = list(set(idRs) - act)
   114                                               # minimizing
   115       505          344      0.7      0.0      for rxn in idRs:
   116       288          166      0.6      0.0          if rxn not in act:
   117                                                   #EG Reduce the number of reactions that need to be investigated
   118                                                   #based off of lower boundary constraints
   119       288         1243      4.3      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   120                                                           # reseting the objective
   121       288         7265     25.2      0.0                  cbm.guro.setObjective(0)
   122       288        16276     56.5      0.0                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   123       288       120755    419.3      0.4                  cbm.guro.optimize()
   124    154313       243913      1.6      0.7                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   125       288         2623      9.1      0.0                  indices = (sol > thresh).nonzero()[0]
   126       288         3709     12.9      0.0                  act2 = act.copy()
   127       288        10751     37.3      0.0                  act.update(arrayIdRs[indices])
   128       288         2644      9.2      0.0                  if act2 != act:
   129         1           17     17.0      0.0                      print "added 2"
   130         1            1      1.0      0.0                      if rxn in act:
   131                                                                   print rxn
   132       217          120      0.6      0.0      return act

Total time: 64.6779 s
File: mba_no_fork.py
Function: pruneRxn at line 134

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   134                                           @profile
   135                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   136                                                        lb_biomass):
   137       195          146      0.7      0.0      try:
   138                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   139                                                   #or if the biomass flux becomes inactive, stop pruning.
   140       195          121      0.6      0.0          rxntodelete = rxn
   141       195     14060117  72103.2     21.7          m0 = deleteCbmRxns(cbm, rxntodelete)
   142                                                   #NOTE the threshold for is set a bit higher for cH rxns
   143       195     31380146 160923.8     48.5          act = findActiveRxns(m0, thresh, cH)
   144       180         5486     30.5      0.0          cH_act = cH & act
   145       180         1482      8.2      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   146                                                       #print "not all active 1"
   147       137           74      0.5      0.0              return cbm
   148                                                   #######################################################################
   149                                                   # INPUTS
   150        43           26      0.6      0.0          eps = 1E-10
   151        43           22      0.5      0.0          activityThreshold = 1E-10
   152        43           25      0.6      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   153                                                   #######################################################################
   154                                                   # STATEMENTS
   155        43        11565    269.0      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   156        43         2783     64.7      0.0          hfr = hfr & set(m0.idRs)
   157                                                   #forcing biomass production
   158        43          253      5.9      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   159                                                   #minimizingg the sum of fluxes
   160        43       537688  12504.4      0.8          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   161        43      6831457 158871.1     10.6          mtry1result.initMipGurobi()
   162        43       573336  13333.4      0.9          mtry1result.minSumFluxes_gurobi()
   163                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   164                                                   #function, so that the reactants and products could be written out
   165        43       454812  10577.0      0.7          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   166        23           22      1.0      0.0      except:
   167                                                   #print "exception 1"
   168        23           13      0.6      0.0          return cbm
   169                                                   #EG Identify the reactions that became inactive after the
   170                                                   #reaction was deleted. If extra deleted reactions cause the
   171                                                   #model to be unsolvable, or if extra deleted inactive reactions
   172                                                   #cause any of the hfrs to become inactive, or if a solution
   173                                                   #cannot be obtained with a biomass flux, only delete the one
   174                                                   #reaction. Otherwise, delete the inactive reactions.
   175        35           39      1.1      0.0      try:
   176        35         3213     91.8      0.0          inact = set(m0.idRs) - act - cH
   177        35      2544768  72707.7      3.9          m1 = deleteCbmRxns(m0, inact)
   178        35      5756826 164480.7      8.9          act2 = findActiveRxns(m1, thresh, cH)
   179        35         1028     29.4      0.0          cH_act2 = cH & act2
   180        35          281      8.0      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   181                                                       #print rxntodelete
   182        22           11      0.5      0.0              return m0
   183                                                   ###################################################################
   184                                                   # INPUTS
   185        13            6      0.5      0.0          eps = 1E-10
   186        13            4      0.3      0.0          activityThreshold = 1E-10
   187        13            5      0.4      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   188                                                   ###################################################################
   189                                                   # STATEMENTS
   190        13         3421    263.2      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   191        13          822     63.2      0.0          hfr = hfr & set(m1.idRs)
   192                                                   #forcing biomass production
   193        13           76      5.8      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   194                                                   #minimizing the sum of fluxes
   195        13       157567  12120.5      0.2          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   196        13      2009487 154575.9      3.1          mtry2result.initMipGurobi()
   197        13       177888  13683.7      0.3          mtry2result.minSumFluxes_gurobi()
   198                                                   #EG Added activityThreshold and the m1.rxns dictionary
   199                                                   #to the function, so that the reactants and products could
   200                                                   #be written out
   201        13       162860  12527.7      0.3          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   202                                                   #print inact
   203        13           16      1.2      0.0          return m1
   204                                               except:
   205                                                   #print "exception 2"
   206                                                   return m0

Total time: 65.0683 s
File: mba_no_fork.py
Function: iterativePrunning at line 211

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   211                                           @profile
   212                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   213                                                                 repetition, thresh = 1E-10, EXrxns = [],
   214                                                                 EXtrrxns = [], Othertrrxns = []):
   215                                               """
   216                                               solver can be 'cplex', 'glpk' or 'gurobi'
   217                                               """
   218         1            1      1.0      0.0      if len(EXrxns) > 0:
   219                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   220                                                   random.shuffle(EXrxnsprune)
   221                                                   while EXrxnsprune:
   222                                                       rxn1 = EXrxnsprune.pop()
   223                                                       try:
   224                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   225                                                                             repetition, biomassRxn, lb_biomass)
   226                                                           EXrxnsprune2 = []
   227                                                           for k in mTemp1.idRs:
   228                                                               if k in EXrxnsprune:
   229                                                                   EXrxnsprune2.append(k)
   230                                                           random.shuffle(EXrxnsprune2)
   231                                                           EXrxnsprune = EXrxnsprune2
   232                                                       except NameError:
   233                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   234                                                                             repetition, biomassRxn, lb_biomass)
   235                                                           EXrxnsprune2 = []
   236                                                           for k in mTemp1.idRs:
   237                                                               if k in EXrxnsprune:
   238                                                                   EXrxnsprune2.append(k)
   239                                                           random.shuffle(EXrxnsprune2)
   240                                                           EXrxnsprune = EXrxnsprune2
   241         1            0      0.0      0.0      if len(EXtrrxns) > 0:
   242                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   243                                                   EXtrrxnsprunelist = []
   244                                                   for j in EXtrrxnsprune:
   245                                                       if j in mTemp1.idRs:
   246                                                           EXtrrxnsprunelist.append(j)
   247                                                   random.shuffle(EXtrrxnsprune)
   248                                                   while EXtrrxnsprune:
   249                                                       rxn2 = EXtrrxnsprune.pop()
   250                                                       try:
   251                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   252                                                                             repetition, biomassRxn, lb_biomass)
   253                                                           EXtrrxnsprune2 = []
   254                                                           for k in mTemp1.idRs:
   255                                                               if k in EXtrrxnsprune:
   256                                                                   EXtrrxnsprune2.append(k)
   257                                                           random.shuffle(EXtrrxnsprune2)
   258                                                           EXtrrxnsprune = EXtrrxnsprune2
   259                                                       except NameError:
   260                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   261                                                                             repetition, biomassRxn, lb_biomass)
   262                                                           EXtrrxnsprune2 = []
   263                                                           for k in mTemp1.idRs:
   264                                                               if k in EXtrrxnsprune:
   265                                                                   EXtrrxnsprune2.append(k)
   266                                                           random.shuffle(EXtrrxnsprune2)
   267                                                           EXtrrxnsprune = EXtrrxnsprune2
   268                                           
   269         1            1      1.0      0.0      prunableRxns = []
   270         1            1      1.0      0.0      try:
   271         1            4      4.0      0.0          for j in mTemp1.idRs:
   272                                                       if j not in list(cH):
   273                                                           if j not in EXrxns:
   274                                                               if j not in EXtrrxns:
   275                                                                   if j not in Othertrrxns:
   276                                                                       prunableRxns.append(j)
   277         1            1      1.0      0.0      except NameError:
   278       747          398      0.5      0.0          for j in m.idRs:
   279       746         3747      5.0      0.0              if j not in list(cH):
   280       397          207      0.5      0.0                  if j not in EXrxns:
   281       397          201      0.5      0.0                      if j not in EXtrrxns:
   282       397          203      0.5      0.0                          if j not in Othertrrxns:
   283       397          226      0.6      0.0                              prunableRxns.append(j)
   284         1          241    241.0      0.0      random.shuffle(prunableRxns)
   285       196          133      0.7      0.0      while prunableRxns:
   286       195          190      1.0      0.0          rxn3 = prunableRxns.pop()
   287       195          100      0.5      0.0          try:
   288       195          143      0.7      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   289       194     63705054 328376.6     97.9                                repetition, biomassRxn, lb_biomass)
   290       194          204      1.1      0.0              prunableRxns2 = []
   291    103504        52388      0.5      0.1              for k in mTemp1.idRs:
   292    103310       119160      1.2      0.2                  if k in prunableRxns:
   293     20762        15719      0.8      0.0                      prunableRxns2.append(k)
   294       194        13772     71.0      0.0              random.shuffle(prunableRxns2)
   295       194          200      1.0      0.0              prunableRxns = prunableRxns2
   296                                                       #prunableRxns2_appended = prunableRxns.append()
   297                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   298                                                       #for k in mTemp1.idRs:
   299                                                       #    if k in prunableRxns:
   300                                                       #        prunableRxns2.append(k)
   301                                                       #random.shuffle(prunableRxns2_appended)
   302                                                       #prunableRxns = prunableRxns2_appended
   303         1            1      1.0      0.0          except NameError:
   304         1            1      1.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   305         1      1153718 1153718.0      1.8                                repetition, biomassRxn, lb_biomass)
   306         1            1      1.0      0.0              prunableRxns2 = []
   307       605          315      0.5      0.0              for k in mTemp1.idRs:
   308       604         1662      2.8      0.0                  if k in prunableRxns:
   309       255          146      0.6      0.0                      prunableRxns2.append(k)
   310         1          154    154.0      0.0              random.shuffle(prunableRxns2)
   311         1            2      2.0      0.0              prunableRxns = prunableRxns2
   312                                                       #prunableRxns2_appended = prunableRxns.append()
   313                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   314                                                       #random.shuffle(prunableRxns2_appended)
   315                                                       #prunableRxns = prunableRxns2_appended
   316                                                       #for k in mTemp1.idRs:
   317                                                       #    if k in prunableRxns:
   318                                                       #        prunableRxns2.append(k)
   319                                                       #random.shuffle(prunableRxns2)
   320                                                       #prunableRxns = prunableRxns2
   321         1            1      1.0      0.0      return mTemp1.idRs

Total time: 0.00022 s
File: utilities.py
Function: exportPickle at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def exportPickle(obj, fileName, mode = 'wb', protocol = -1):
    36                                               """
    37                                               Exports an object as a pickle file. By default it writes as binary (wb).
    38                                               Setting mode allows other ways of opening the file (e.g. mode = 'w')
    39                                               """
    40         1           15     15.0      6.8      import cPickle as pickle
    41         1           34     34.0     15.5      f = open(fileName, mode)
    42         1          158    158.0     71.8      pickle.dump(obj, f, protocol = -1)
    43         1           13     13.0      5.9      f.close()

