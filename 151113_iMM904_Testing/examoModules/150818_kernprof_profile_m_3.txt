set(['R_LPP_SC', 'R_TMN', 'R_SUCCt2r', 'R_ALCD24xim', 'R_NTD1', 'R_PAK_SC', 'R_GLXt', 'R_ASNt6', 'R_ASNt7', 'R_EX_mal_L_e_', 'R_C22STDS', 'R_LEUt6', 'R_LEUt7', 'R_EX_iamac_e_', 'R_EX_dttp_e_', 'R_CITt2r', 'R_EX_gam6p_e_', 'R_FTHFCLm', 'R_C5STDS', 'R_ALCD2irm', 'R_ALCD22yi', 'R_DIAT', 'R_PHEACt', 'R_PI35BP5P_SC', 'R_ACESt', 'R_ILEt6', 'R_ILEt7', 'R_DPR', 'R_EX_hxan_e_', 'R_IAMOHtm', 'R_D_LACDm', 'R_DTTPt', 'R_PYDAMK', 'R_PMI12346PS', 'R_EX_ergst_e_', 'R_EX_aces_e_', 'R_SAM24MT', 'R_EX_ibutac_e_', 'R_EX_oaa_e_', 'R_ALCD23yi', 'R_PMI12346PH', 'R_HYPOE', 'R_HETZK', 'R_FDNG', 'R_ETOHtm', 'R_IBUTACt', 'R_NADPPPSm', 'R_ALCD25yi', 'R_POLYAO2', 'R_POLYAO3', 'R_EX_glx_e_', 'R_PI3P5K_SC', 'R_IBUTOHtm', 'R_EX_pyr_e_', 'R_PMI1346PH', 'R_GLCGSDv', 'R_PI45BP5P_SC', 'R_PMI1346PS', 'R_G5SADrm', 'R_GLYOX', 'R_PFK26', 'R_EX_3mop_e_', 'R_TYRTAim', 'R_ASPGLU2m', 'R_DRTPPD', 'R_NTD9', 'R_PMDPHT', 'R_13BGH', 'R_EX_pheac_e_', 'R_NTD5', 'R_NTD7', 'R_NTD6', 'R_HXANt2r', 'R_GLNt7', 'R_GLNt6', 'R_ERGSTt', 'R_PDE1', 'R_OAAt', 'R_PACALDtm', 'R_THRt2m', 'R_EX_ac_e_', 'R_ACHLE2', 'R_FBP26', 'R_ACHLE1', 'R_GAM6Pt', 'R_LGTHL', 'R_PYR5CDm', 'R_ALCD24yi', 'R_ICDHxm', 'R_OHACT2', 'R_OHACT3', 'R_OHACT4', 'R_OHACT5', 'R_DROPPRy', 'R_EX_2mbac_e_', 'R_D_LACDcm', 'R_THRD_Lm', 'R_GLYCt2', 'R_SBT_Dt', 'R_3MBALDtm', 'R_DB4PS', 'R_TMDPP', 'R_HSDxi', 'R_MEVK3', 'R_MEVK2', 'R_EX_akg_e_', 'R_MEVK4', 'R_NADKm', 'R_EX_succ_e_', 'R_ACALDt', 'R_PUNP2', 'R_TYRt2m', 'R_THYMt3r', 'R_DHORDfum', 'R_2PHETOHtm', 'R_2MBALDt', 'R_D_LACt2', 'R_ATPATF1', 'R_ALCD23xim', 'R_EX_sbt_D_e_', 'R_IAMACt', 'R_FECOSTt', 'R_G3PD1ir', 'R_ALCD25xim', 'R_GLCNtv', 'R_EX_lac_D_e_', 'R_EX_thym_e_', 'R_RNDR2', 'R_RNDR3', 'R_RNDR1', 'R_GTPCII', 'R_FOLD3m', 'R_EX_cit_e_', 'R_2MPPALtm', 'R_TYRt7', 'R_TYRt6', 'R_PI4P5K_SC', 'R_TMDK1', 'R_HPPKm', 'R_EX_fecost_e_', 'R_RBFSb', 'R_RBFSa', 'R_EX_acald_e_', 'R_AP4AHr', 'R_THFATm', 'R_3MOPt', 'R_C8STI', 'R_EX_2mbald_e_', 'R_2MBACt'])
set(['R_FAS80COA_L', 'R_ALCD26xim', 'R_DHORDi', 'R_ACHLE3', 'R_4HBZCOAFm', 'R_4HBZFm', 'R_ID3ACALDtm', 'R_BPNT', 'R_EX_pap_e_', 'R_PAN4Ptm', 'R_IND3ETHtm', 'R_EX_pacald_e_', 'R_PAPtm', 'R_TREHv', 'R_FACOAL140', 'R_RNDR4', 'R_FAS140COA', 'R_EX_ttdca_e_', 'R_PAPt', 'R_TTDCAtr', 'R_OHACT1', 'R_6PGLter', 'R_G6PDH2er', 'R_SPRMS', 'R_THIORDXp', 'R_PACALDt', 'R_PPNDH', 'R_FAS100COA', 'R_34HPPt2m', 'R_FAS120COA', 'R_34HPLFM', 'R_ALDD2xm', 'R_ACCOACr', 'R_TREt2v', 'R_GLCtv', 'R_G6Pter', 'R_ACPSm', 'R_TRDRDtp', 'R_T4HCINNMFM', 'R_COUCOAFm'])
set(['R_2MPPALt', 'R_ABUTt2r', 'R_EX_2hb_e_', 'R_EX_2mppal_e_', 'R_EX_4abut_e_', 'R_2HBO', 'R_2HBt2'])
set(['R_ADPT', 'R_GLUt7m', 'R_ACOAHim', 'R_DCTPD', 'R_ABTA'])
set(['R_DKMPPD2', 'R_2MBALDtm', 'R_SPMDAT1', 'R_AHMMPS', 'R_MTRI', 'R_ALCD22xim', 'R_AABTN', 'R_ALDD22x', 'R_APRTO2', 'R_PANTS', 'R_2MBTOHtm', 'R_MOHMT', 'R_PPNCL2', 'R_ME2m', 'R_MTAP', 'R_UNK3', 'R_POLYAO', 'R_NABTNO', 'R_SPMS', 'R_2DHPtm', 'R_PANTtm', 'R_PMPK', 'R_MDRPD', 'R_DPRm', 'R_HMPK1', 'R_DPCOAK', 'R_PNTK', 'R_PTPATi', 'R_ADMDC', 'R_THZPSN1_SC', 'R_TMPPP', 'R_PPCDC'])
set([])
not all active 1
exception 1
set(['R_MDHp', 'R_GUAD'])
not all active 1
exception 1
not all active 1
set(['R_GLYGS', 'R_GBEZ', 'R_THRS'])
exception 1
exception 1
set(['R_KYN', 'R_HCO3tn', 'R_3C3HMPt', 'R_XANt', 'R_EX_xan_e_', 'R_HCO3En', 'R_EX_3c3hmp_e_'])
not all active 1
not all active 1
not all active 1
not all active 1
set(['R_4ABZt'])
exception 1
set([])
not all active 1
set(['R_MALt2r', 'R_AKGMAL'])
exception 1
not all active 1
set(['R_CITtcm', 'R_SUCCtm'])
not all active 1
not all active 1
not all active 1
not all active 1
exception 1
not all active 1
set(['R_SUCOASm'])
set(['R_ACt2r'])
not all active 1
set(['R_GSNK', 'R_ASPt2m', 'R_PUNP3'])
set(['R_KARA1im', 'R_CYSTS', 'R_DHAD1m', 'R_GLUN'])
set(['R_ASPt2n'])
set(['R_GLUSx'])
set(['R_ICDHy'])
set(['R_P5CDm', 'R_PRO1xm'])
set(['R_EX_glu_L_e_'])
set(['R_TYRt2r'])
set([])
exception 1
set(['R_3MBALDt'])
set(['R_ORNt2r'])
set(['R_ADK4'])
not all active 1
set(['R_D_LACt2m'])
set([])
exception 1
not all active 1
set(['R_UGLT'])
not all active 1
not all active 1
set(['R_EX_ala_L_e_'])
set(['R_EX_zymst_e_', 'R_ME1m'])
not all active 1
set(['R_FUMt2r'])
exception 1
not all active 1
not all active 1
set(['R_EX_arg_L_e_', 'R_TREH'])
set([])
not all active 1
not all active 1
exception 1
set([])
exception 1
set(['R_EX_ile_L_e_'])
not all active 1
exception 1
set(['R_ID3ACALDt'])
set(['R_EX_gly_e_'])
not all active 1
exception 1
exception 1
not all active 1
exception 1
exception 1
not all active 1
not all active 1
set(['R_EX_his_L_e_'])
not all active 1
not all active 1
exception 1
not all active 1
set([])
exception 1
not all active 1
set(['R_FORt'])
not all active 1
not all active 1
set([])
not all active 1
set([])
not all active 1
exception 1
exception 1
not all active 1
not all active 1
exception 1
not all active 1
set([])
exception 1
exception 1
not all active 1
set(['R_ASPt2r'])
not all active 1
set(['R_EX_trp_L_e_'])
set(['R_EX_ser_L_e_'])
not all active 1
not all active 1
not all active 1
set(['R_EX_co2_e_'])
exception 1
not all active 1
not all active 1
not all active 1
exception 1
Wrote profile results to mba_no_fork_m.py.lprof
Timer unit: 1e-06 s

Total time: 9.1336 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       174          953      5.5      0.0          from numpy import array
    98       174        11835     68.0      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       174        44949    258.3      0.5          self.guro.setParam('OutputFlag', 0) 
   101     80418        48203      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102     80244      1793674     22.4     19.6              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       174        23701    136.2      0.3          self.guro.update()
   104                                                   # adding constraints
   105     68476       113183      1.7      1.2          for i, row in enumerate(self.S.toarray()):
   106     68302       264288      3.9      2.9              nz = row.nonzero()[0]
   107     68302      2181433     31.9     23.9              pair = zip(row[nz], array(self.idRs)[nz])
   108     68302        40660      0.6      0.4              s = ''
   109    271339       146351      0.5      1.6              for p in pair:
   110    203037       385948      1.9      4.2                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111     68302        66687      1.0      0.7              s = s.rstrip(' + ')
   112     68302        41803      0.6      0.5              s += ' == %s' % 0.
   113     68302      3969932     58.1     43.5              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 20.3682 s
File: mba_no_fork_m.py
Function: findActiveRxns_name at line 84

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    84                                           @profile
    85                                           def findActiveRxns_name(name, thresh, rl = []):
    86       172       421620   2451.3      2.1      cbm = importPickle(name)
    87       172          339      2.0      0.0      act = set()
    88       172         6034     35.1      0.0      arrayIdRs = array(cbm.idRs[:])
    89       172      9572333  55653.1     47.0      init = cbm.initLp()
    90       172          116      0.7      0.0      init 
    91       172          149      0.9      0.0      if rl:
    92       172           99      0.6      0.0          idRs = rl
    93                                               else:
    94                                                   idRs = cbm.idRs[:]
    95                                               # maximizing all reactions at once
    96                                               # reseting the objective
    97       172         6016     35.0      0.0      cbm.guro.setObjective(0)
    98                                               # setting the objective
    99       172          126      0.7      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
   100     78924        54557      0.7      0.3      for var in cbm.guro.getVars():
   101     78752       201669      2.6      1.0          s += 'cbm.%s, ' % var.varName
   102       172          543      3.2      0.0      s = s.rstrip(', ')
   103       172          335      1.9      0.0      s += '])'
   104       172       143292    833.1      0.7      exec s
   105                                               #EG Initially set the objective to maximize
   106       172        30738    178.7      0.2      cbm.guro.setObjective(cbm.linobj)#1 for maximize
   107       172       266058   1546.8      1.3      cbm.guro.optimize()
   108     68193       113422      1.7      0.6      sol = abs(array([v.x for v in cbm.guro.getVars()]))
   109       148         1785     12.1      0.0      indices = (sol > thresh).nonzero()[0]
   110       148         5014     33.9      0.0      act.update(arrayIdRs[indices])
   111       148         5775     39.0      0.0      idRs = list(set(idRs) - act)
   112                                               # maximizing
   113     25701        13906      0.5      0.1      for rxn in idRs:
   114     25553        15661      0.6      0.1          if rxn not in act:
   115                                                   #EG Reduce the number of reactions that need to be investigated
   116                                                   #based off of upper boundary constraints
   117      6488        27295      4.2      0.1              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   118                                                           # reseting the objective
   119      6488       161096     24.8      0.8                  cbm.guro.setObjective(0)
   120      6488       359917     55.5      1.8                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   121      6488      3554486    547.9     17.5                  cbm.guro.optimize()
   122   3017885      4787998      1.6     23.5                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   123      6488        57336      8.8      0.3                  indices = (sol > thresh).nonzero()[0]
   124                                                           #act2 = act.copy()
   125      6488       251770     38.8      1.2                  act.update(arrayIdRs[indices])
   126                                                           #if act2 != act:
   127                                                               #print "added 1"
   128                                                               #if rxn in act:
   129                                                                   #print rxn
   130       148         2720     18.4      0.0      idRs = list(set(idRs) - act)
   131                                               # minimizing
   132       312          252      0.8      0.0      for rxn in idRs:
   133       164          117      0.7      0.0          if rxn not in act:
   134                                                   #EG Reduce the number of reactions that need to be investigated
   135                                                   #based off of lower boundary constraints
   136       164          575      3.5      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   137                                                           # reseting the objective
   138       164         3905     23.8      0.0                  cbm.guro.setObjective(0)
   139       164         8897     54.2      0.0                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   140       164        61738    376.5      0.3                  cbm.guro.optimize()
   141     71517       112734      1.6      0.6                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   142     71517       111114      1.6      0.5                  sol_no_absolute = array([v.x for v in cbm.guro.getVars()])
   143       164         1518      9.3      0.0                  indices = (sol > thresh).nonzero()[0]
   144                                                           #act2 = act.copy()
   145       164         5091     31.0      0.0                  act.update(arrayIdRs[indices])
   146                                                           #if act2 != act:
   147                                                               #print "added 2"
   148                                                               #if rxn in act:
   149                                                                   #print rxn
   150                                                                   #print sol
   151                                                                   #print sol_no_absolute
   152                                                                   #print indices
   153                                                                   #print arrayIdRs
   154       148           77      0.5      0.0      return act

Total time: 0.437118 s
File: mba_no_fork_m.py
Function: findActiveRxns at line 156

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   156                                           @profile
   157                                           def findActiveRxns(cbm, thresh, rl = []):
   158         2            3      1.5      0.0      act = set()
   159         2           99     49.5      0.0      arrayIdRs = array(cbm.idRs[:])
   160         2       191031  95515.5     43.7      init = cbm.initLp()
   161         2            2      1.0      0.0      init 
   162         2            2      1.0      0.0      if rl:
   163         2            1      0.5      0.0          idRs = rl
   164                                               else:
   165                                                   idRs = cbm.idRs[:]
   166                                               # maximizing all reactions at once
   167                                               # reseting the objective
   168         2           89     44.5      0.0      cbm.guro.setObjective(0)
   169                                               # setting the objective
   170         2            1      0.5      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
   171      1494         1029      0.7      0.2      for var in cbm.guro.getVars():
   172      1492         4315      2.9      1.0          s += 'cbm.%s, ' % var.varName
   173         2            8      4.0      0.0      s = s.rstrip(', ')
   174         2            5      2.5      0.0      s += '])'
   175         2         2902   1451.0      0.7      exec s
   176                                               #EG Initially set the objective to maximize
   177         2          570    285.0      0.1      cbm.guro.setObjective(cbm.linobj)#1 for maximize
   178         2         5646   2823.0      1.3      cbm.guro.optimize()
   179      1494         2459      1.6      0.6      sol = abs(array([v.x for v in cbm.guro.getVars()]))
   180         2           32     16.0      0.0      indices = (sol > thresh).nonzero()[0]
   181         2           65     32.5      0.0      act.update(arrayIdRs[indices])
   182         2           79     39.5      0.0      idRs = list(set(idRs) - act)
   183                                               # maximizing
   184       418          203      0.5      0.0      for rxn in idRs:
   185       416          227      0.5      0.1          if rxn not in act:
   186                                                   #EG Reduce the number of reactions that need to be investigated
   187                                                   #based off of upper boundary constraints
   188       100          773      7.7      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   189                                                           # reseting the objective
   190       100         2898     29.0      0.7                  cbm.guro.setObjective(0)
   191       100         6020     60.2      1.4                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   192       100        97335    973.4     22.3                  cbm.guro.optimize()
   193     74700       115778      1.5     26.5                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   194       100         1104     11.0      0.3                  indices = (sol > thresh).nonzero()[0]
   195                                                           #act2 = act.copy()
   196       100         4396     44.0      1.0                  act.update(arrayIdRs[indices])
   197                                                           #if act2 != act:
   198                                                               #print "added 1"
   199                                                               #if rxn in act:
   200                                                                   #print rxn
   201         2           44     22.0      0.0      idRs = list(set(idRs) - act)
   202                                               # minimizing
   203         2            1      0.5      0.0      for rxn in idRs:
   204                                                   if rxn not in act:
   205                                                   #EG Reduce the number of reactions that need to be investigated
   206                                                   #based off of lower boundary constraints
   207                                                       if cbm.lb[cbm.idRs.index(rxn)] != 0:
   208                                                           # reseting the objective
   209                                                           cbm.guro.setObjective(0)
   210                                                           exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   211                                                           cbm.guro.optimize()
   212                                                           sol = abs(array([v.x for v in cbm.guro.getVars()]))
   213                                                           sol_no_absolute = array([v.x for v in cbm.guro.getVars()])
   214                                                           indices = (sol > thresh).nonzero()[0]
   215                                                           #act2 = act.copy()
   216                                                           act.update(arrayIdRs[indices])
   217                                                           #if act2 != act:
   218                                                               #print "added 2"
   219                                                               #if rxn in act:
   220                                                                   #print rxn
   221                                                                   #print sol
   222                                                                   #print sol_no_absolute
   223                                                                   #print indices
   224                                                                   #print arrayIdRs
   225         2            1      0.5      0.0      return act

Total time: 50.2252 s
File: mba_no_fork_m.py
Function: pruneRxn at line 227

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   227                                           @profile
   228                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   229                                                        lb_biomass):
   230       123          112      0.9      0.0      try:
   231                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   232                                                   #or if the biomass flux becomes inactive, stop pruning.
   233       123           76      0.6      0.0          rxntodelete = rxn
   234       123      6737962  54780.2     13.4          m0 = deleteCbmRxns(cbm, rxntodelete)
   235       123          166      1.3      0.0          name = '../data/sample_model.pkl'
   236       123       358412   2913.9      0.7          exportPickle(m0, name)
   237       123       366882   2982.8      0.7          importPickle('../data/sample_model.pkl')
   238                                                   #NOTE the threshold for is set a bit higher for cH rxns
   239       123     15458145 125676.0     30.8          act = findActiveRxns_name(name, thresh, cH)
   240        99         5094     51.5      0.0          cH_act = cH & act
   241        99          899      9.1      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   242        48          176      3.7      0.0              print "not all active 1"
   243        48           36      0.8      0.0              return cbm
   244                                                   #######################################################################
   245                                                   # INPUTS
   246        51           33      0.6      0.0          eps = 1E-10
   247        51           22      0.4      0.0          activityThreshold = 1E-10
   248        51           21      0.4      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   249                                                   #######################################################################
   250                                                   # STATEMENTS
   251        51        11459    224.7      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   252        51         3634     71.3      0.0          hfr = hfr & set(m0.idRs)
   253                                                   #forcing biomass production
   254        51          276      5.4      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   255                                                   #minimizingg the sum of fluxes
   256        51       482206   9455.0      1.0          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   257        51      7307199 143278.4     14.5          mtry1result.initMipGurobi()
   258        51       617956  12116.8      1.2          mtry1result.minSumFluxes_gurobi()
   259                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   260                                                   #function, so that the reactants and products could be written out
   261        51       548561  10756.1      1.1          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   262        26           25      1.0      0.0      except:
   263        26           89      3.4      0.0          print "exception 1"
   264        26           18      0.7      0.0          return cbm
   265                                                   #EG Identify the reactions that became inactive after the
   266                                                   #reaction was deleted. If extra deleted reactions cause the
   267                                                   #model to be unsolvable, or if extra deleted inactive reactions
   268                                                   #cause any of the hfrs to become inactive, or if a solution
   269                                                   #cannot be obtained with a biomass flux, only delete the one
   270                                                   #reaction. Otherwise, delete the inactive reactions.
   271        49           71      1.4      0.0      try:
   272        49         3769     76.9      0.0          inact = set(m0.idRs) - act - cH
   273        49      2804660  57238.0      5.6          m1 = deleteCbmRxns(m0, inact)
   274        49      6949031 141817.0     13.8          act2 = findActiveRxns_name(name, thresh, cH)
   275        49         1929     39.4      0.0          cH_act2 = cH & act2
   276        49          424      8.7      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   277                                                       print rxntodelete
   278                                                       return m0
   279                                                   ###################################################################
   280                                                   # INPUTS
   281        49           27      0.6      0.0          eps = 1E-10
   282        49           34      0.7      0.0          activityThreshold = 1E-10
   283        49           27      0.6      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   284                                                   ###################################################################
   285                                                   # STATEMENTS
   286        49        11030    225.1      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   287        49         3401     69.4      0.0          hfr = hfr & set(m1.idRs)
   288                                                   #forcing biomass production
   289        49          264      5.4      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   290                                                   #minimizing the sum of fluxes
   291        49       455213   9290.1      0.9          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   292        49      6947379 141783.2     13.8          mtry2result.initMipGurobi()
   293        49       589585  12032.3      1.2          mtry2result.minSumFluxes_gurobi()
   294                                                   #EG Added activityThreshold and the m1.rxns dictionary
   295                                                   #to the function, so that the reactants and products could
   296                                                   #be written out
   297        49       558312  11394.1      1.1          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   298        49          509     10.4      0.0          print inact
   299        49           38      0.8      0.0          return m1
   300                                               except:
   301                                                   print "exception 2"
   302                                                   return m0

Total time: 50.4584 s
File: mba_no_fork_m.py
Function: iterativePrunning at line 307

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   307                                           @profile
   308                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   309                                                                 repetition, thresh = 1E-10, EXrxns = [],
   310                                                                 EXtrrxns = [], Othertrrxns = []):
   311                                               """
   312                                               solver can be 'cplex', 'glpk' or 'gurobi'
   313                                               """
   314         1            1      1.0      0.0      if len(EXrxns) > 0:
   315                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   316                                                   random.shuffle(EXrxnsprune)
   317                                                   while EXrxnsprune:
   318                                                       rxn1 = EXrxnsprune.pop()
   319                                                       try:
   320                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   321                                                                             repetition, biomassRxn, lb_biomass)
   322                                                           EXrxnsprune2 = []
   323                                                           for k in mTemp1.idRs:
   324                                                               if k in EXrxnsprune:
   325                                                                   EXrxnsprune2.append(k)
   326                                                           random.shuffle(EXrxnsprune2)
   327                                                           EXrxnsprune = EXrxnsprune2
   328                                                       except NameError:
   329                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   330                                                                             repetition, biomassRxn, lb_biomass)
   331                                                           EXrxnsprune2 = []
   332                                                           for k in mTemp1.idRs:
   333                                                               if k in EXrxnsprune:
   334                                                                   EXrxnsprune2.append(k)
   335                                                           random.shuffle(EXrxnsprune2)
   336                                                           EXrxnsprune = EXrxnsprune2
   337         1            0      0.0      0.0      if len(EXtrrxns) > 0:
   338                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   339                                                   EXtrrxnsprunelist = []
   340                                                   for j in EXtrrxnsprune:
   341                                                       if j in mTemp1.idRs:
   342                                                           EXtrrxnsprunelist.append(j)
   343                                                   random.shuffle(EXtrrxnsprune)
   344                                                   while EXtrrxnsprune:
   345                                                       rxn2 = EXtrrxnsprune.pop()
   346                                                       try:
   347                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   348                                                                             repetition, biomassRxn, lb_biomass)
   349                                                           EXtrrxnsprune2 = []
   350                                                           for k in mTemp1.idRs:
   351                                                               if k in EXtrrxnsprune:
   352                                                                   EXtrrxnsprune2.append(k)
   353                                                           random.shuffle(EXtrrxnsprune2)
   354                                                           EXtrrxnsprune = EXtrrxnsprune2
   355                                                       except NameError:
   356                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   357                                                                             repetition, biomassRxn, lb_biomass)
   358                                                           EXtrrxnsprune2 = []
   359                                                           for k in mTemp1.idRs:
   360                                                               if k in EXtrrxnsprune:
   361                                                                   EXtrrxnsprune2.append(k)
   362                                                           random.shuffle(EXtrrxnsprune2)
   363                                                           EXtrrxnsprune = EXtrrxnsprune2
   364                                           
   365         1            1      1.0      0.0      prunableRxns = []
   366         1            1      1.0      0.0      try:
   367         1            4      4.0      0.0          for j in mTemp1.idRs:
   368                                                       if j not in list(cH):
   369                                                           if j not in EXrxns:
   370                                                               if j not in EXtrrxns:
   371                                                                   if j not in Othertrrxns:
   372                                                                       prunableRxns.append(j)
   373         1            1      1.0      0.0      except NameError:
   374       747          368      0.5      0.0          for j in m.idRs:
   375       746         3657      4.9      0.0              if j not in list(cH):
   376       397          187      0.5      0.0                  if j not in EXrxns:
   377       397          187      0.5      0.0                      if j not in EXtrrxns:
   378       397          195      0.5      0.0                          if j not in Othertrrxns:
   379       397          214      0.5      0.0                              prunableRxns.append(j)
   380         1          234    234.0      0.0      random.shuffle(prunableRxns)
   381       124           79      0.6      0.0      while prunableRxns:
   382       123          135      1.1      0.0          rxn3 = prunableRxns.pop()
   383       123           72      0.6      0.0          try:
   384       123          101      0.8      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   385       122     49159240 402944.6     97.4                                repetition, biomassRxn, lb_biomass)
   386       122          121      1.0      0.0              prunableRxns2 = []
   387     55153        27977      0.5      0.1              for k in mTemp1.idRs:
   388     55031        56887      1.0      0.1                  if k in prunableRxns:
   389      8956         6582      0.7      0.0                      prunableRxns2.append(k)
   390       122         6591     54.0      0.0              random.shuffle(prunableRxns2)
   391       122          125      1.0      0.0              prunableRxns = prunableRxns2
   392                                                       #prunableRxns2_appended = prunableRxns.append()
   393                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   394                                                       #for k in mTemp1.idRs:
   395                                                       #    if k in prunableRxns:
   396                                                       #        prunableRxns2.append(k)
   397                                                       #random.shuffle(prunableRxns2_appended)
   398                                                       #prunableRxns = prunableRxns2_appended
   399         1            1      1.0      0.0          except NameError:
   400         1            1      1.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   401         1      1192986 1192986.0      2.4                                repetition, biomassRxn, lb_biomass)
   402         1            1      1.0      0.0              prunableRxns2 = []
   403       597          345      0.6      0.0              for k in mTemp1.idRs:
   404       596         1735      2.9      0.0                  if k in prunableRxns:
   405       247          176      0.7      0.0                      prunableRxns2.append(k)
   406         1          151    151.0      0.0              random.shuffle(prunableRxns2)
   407         1            2      2.0      0.0              prunableRxns = prunableRxns2
   408                                                       #prunableRxns2_appended = prunableRxns.append()
   409                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   410                                                       #random.shuffle(prunableRxns2_appended)
   411                                                       #prunableRxns = prunableRxns2_appended
   412                                                       #for k in mTemp1.idRs:
   413                                                       #    if k in prunableRxns:
   414                                                       #        prunableRxns2.append(k)
   415                                                       #random.shuffle(prunableRxns2)
   416                                                       #prunableRxns = prunableRxns2
   417         1            1      1.0      0.0      return mTemp1.idRs

Total time: 0.35675 s
File: utilities.py
Function: exportPickle at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def exportPickle(obj, fileName, mode = 'wb', protocol = -1):
    36                                               """
    37                                               Exports an object as a pickle file. By default it writes as binary (wb).
    38                                               Setting mode allows other ways of opening the file (e.g. mode = 'w')
    39                                               """
    40       123          386      3.1      0.1      import cPickle as pickle
    41       123        10310     83.8      2.9      f = open(fileName, mode)
    42       123       338747   2754.0     95.0      pickle.dump(obj, f, protocol = -1)
    43       123         7307     59.4      2.0      f.close()

