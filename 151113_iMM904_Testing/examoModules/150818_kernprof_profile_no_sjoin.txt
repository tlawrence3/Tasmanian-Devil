Wrote profile results to mba_no_fork.py.lprof
Timer unit: 1e-06 s

Total time: 9.4373 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       171          876      5.1      0.0          from numpy import array
    98       171        13299     77.8      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       171        47217    276.1      0.5          self.guro.setParam('OutputFlag', 0) 
   101     78830        46538      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102     78659      1819949     23.1     19.3              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       171        25364    148.3      0.3          self.guro.update()
   104                                                   # adding constraints
   105     67900       114504      1.7      1.2          for i, row in enumerate(self.S.toarray()):
   106     67729       264377      3.9      2.8              nz = row.nonzero()[0]
   107     67729      2411625     35.6     25.6              pair = zip(row[nz], array(self.idRs)[nz])
   108     67729        38285      0.6      0.4              s = ''
   109    268493       149527      0.6      1.6              for p in pair:
   110    200764       395510      2.0      4.2                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111     67729        62312      0.9      0.7              s = s.rstrip(' + ')
   112     67729        39587      0.6      0.4              s += ' == %s' % 0.
   113     67729      4008329     59.2     42.5              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 20.1966 s
File: mba_no_fork.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       171          193      1.1      0.0      act = set()
    71       171         5779     33.8      0.0      arrayIdRs = array(cbm.idRs[:])
    72       171     10064517  58856.8     49.8      init = cbm.initLp()
    73       171          102      0.6      0.0      init 
    74       171          146      0.9      0.0      if rl:
    75       171           91      0.5      0.0          idRs = rl
    76                                               else:
    77                                                   idRs = cbm.idRs[:]
    78                                               # maximizing all reactions at once
    79                                               # reseting the objective
    80       171         6436     37.6      0.0      cbm.guro.setObjective(0)
    81                                               # setting the objective
    82       171          116      0.7      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    83     78830        56070      0.7      0.3      for var in cbm.guro.getVars():
    84     78659       211889      2.7      1.0          s += 'cbm.%s, ' % var.varName
    85       171          576      3.4      0.0      s = s.rstrip(', ')
    86       171          328      1.9      0.0      s += '])'
    87       171       144272    843.7      0.7      exec s
    88                                               #EG Initially set the objective to maximize
    89       171        32535    190.3      0.2      cbm.guro.setObjective(cbm.linobj)#1 for maximize
    90       171       273882   1601.6      1.4      cbm.guro.optimize()
    91     67183       114487      1.7      0.6      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    92       144         1758     12.2      0.0      indices = (sol > thresh).nonzero()[0]
    93       144         5027     34.9      0.0      act.update(arrayIdRs[indices])
    94       144         5722     39.7      0.0      idRs = list(set(idRs) - act)
    95                                               # maximizing
    96     21210        11728      0.6      0.1      for rxn in idRs:
    97     21066        13143      0.6      0.1          if rxn not in act:
    98                                                   #EG Reduce the number of reactions that need to be investigated
    99                                                   #based off of upper boundary constraints
   100      6045        36258      6.0      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   101                                                           # reseting the objective
   102      6045       150098     24.8      0.7                  cbm.guro.setObjective(0)
   103      6045       337719     55.9      1.7                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   104      6045      3523951    583.0     17.4                  cbm.guro.optimize()
   105   2841714      4583077      1.6     22.7                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   106      6045        52393      8.7      0.3                  indices = (sol > thresh).nonzero()[0]
   107                                                           #act2 = act.copy()
   108      6045       243874     40.3      1.2                  act.update(arrayIdRs[indices])
   109                                                           #if act2 != act:
   110                                                               #print "added 1"
   111                                                               #if rxn in act:
   112                                                                   #print rxn
   113       144         2665     18.5      0.0      idRs = list(set(idRs) - act)
   114                                               # minimizing
   115       316          222      0.7      0.0      for rxn in idRs:
   116       172          108      0.6      0.0          if rxn not in act:
   117                                                   #EG Reduce the number of reactions that need to be investigated
   118                                                   #based off of lower boundary constraints
   119       169          698      4.1      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   120                                                           # reseting the objective
   121       169         4008     23.7      0.0                  cbm.guro.setObjective(0)
   122       169         9261     54.8      0.0                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   123       169        63865    377.9      0.3                  cbm.guro.optimize()
   124     72634       117596      1.6      0.6                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   125     72634       115063      1.6      0.6                  sol_no_absolute = array([v.x for v in cbm.guro.getVars()])
   126       169         1516      9.0      0.0                  indices = (sol > thresh).nonzero()[0]
   127                                                           #act2 = act.copy()
   128       169         5377     31.8      0.0                  act.update(arrayIdRs[indices])
   129                                                           #if act2 != act:
   130                                                               #print "added 2"
   131                                                               #if rxn in act:
   132                                                                   #print rxn
   133                                                                   #print sol
   134                                                                   #print sol_no_absolute
   135                                                                   #print indices
   136                                                                   #print arrayIdRs
   137       144           79      0.5      0.0      return act

Total time: 50.8059 s
File: mba_no_fork.py
Function: pruneRxn at line 139

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   139                                           @profile
   140                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   141                                                        lb_biomass):
   142       116           83      0.7      0.0      try:
   143                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   144                                                   #or if the biomass flux becomes inactive, stop pruning.
   145       116           78      0.7      0.0          rxntodelete = rxn
   146       116      6608258  56967.7     13.0          m0 = deleteCbmRxns(cbm, rxntodelete)
   147                                                   #NOTE the threshold for is set a bit higher for cH rxns
   148       116     14108220 121622.6     27.8          act = findActiveRxns(m0, thresh, cH)
   149        89         2950     33.1      0.0          cH_act = cH & act
   150        89          768      8.6      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   151                                                       #print "not all active 1"
   152        35           21      0.6      0.0              return cbm
   153                                                   #######################################################################
   154                                                   # INPUTS
   155        54           32      0.6      0.0          eps = 1E-10
   156        54           33      0.6      0.0          activityThreshold = 1E-10
   157        54           32      0.6      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   158                                                   #######################################################################
   159                                                   # STATEMENTS
   160        54        14678    271.8      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   161        54         3519     65.2      0.0          hfr = hfr & set(m0.idRs)
   162                                                   #forcing biomass production
   163        54          290      5.4      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   164                                                   #minimizingg the sum of fluxes
   165        54       558987  10351.6      1.1          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   166        54      7971027 147611.6     15.7          mtry1result.initMipGurobi()
   167        54       675363  12506.7      1.3          mtry1result.minSumFluxes_gurobi()
   168                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   169                                                   #function, so that the reactants and products could be written out
   170        54       626996  11611.0      1.2          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   171        28           27      1.0      0.0      except:
   172                                                   #print "exception 1"
   173        28           17      0.6      0.0          return cbm
   174                                                   #EG Identify the reactions that became inactive after the
   175                                                   #reaction was deleted. If extra deleted reactions cause the
   176                                                   #model to be unsolvable, or if extra deleted inactive reactions
   177                                                   #cause any of the hfrs to become inactive, or if a solution
   178                                                   #cannot be obtained with a biomass flux, only delete the one
   179                                                   #reaction. Otherwise, delete the inactive reactions.
   180        53           77      1.5      0.0      try:
   181        53         4343     81.9      0.0          inact = set(m0.idRs) - act - cH
   182        53      3231928  60979.8      6.4          m1 = deleteCbmRxns(m0, inact)
   183        53      7383977 139320.3     14.5          act2 = findActiveRxns(m1, thresh, cH)
   184        53         1639     30.9      0.0          cH_act2 = cH & act2
   185        53          439      8.3      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   186                                                       #print rxntodelete
   187                                                       return m0
   188                                                   ###################################################################
   189                                                   # INPUTS
   190        53           32      0.6      0.0          eps = 1E-10
   191        53           29      0.5      0.0          activityThreshold = 1E-10
   192        53           30      0.6      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   193                                                   ###################################################################
   194                                                   # STATEMENTS
   195        53        13920    262.6      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   196        53         3346     63.1      0.0          hfr = hfr & set(m1.idRs)
   197                                                   #forcing biomass production
   198        53          286      5.4      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   199                                                   #minimizing the sum of fluxes
   200        53       540940  10206.4      1.1          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   201        53      7769802 146600.0     15.3          mtry2result.initMipGurobi()
   202        53       658107  12417.1      1.3          mtry2result.minSumFluxes_gurobi()
   203                                                   #EG Added activityThreshold and the m1.rxns dictionary
   204                                                   #to the function, so that the reactants and products could
   205                                                   #be written out
   206        53       625522  11802.3      1.2          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   207                                                   #print inact
   208        53           85      1.6      0.0          return m1
   209                                               except:
   210                                                   #print "exception 2"
   211                                                   return m0

Total time: 51.0883 s
File: mba_no_fork.py
Function: iterativePrunning at line 216

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   216                                           @profile
   217                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   218                                                                 repetition, thresh = 1E-10, EXrxns = [],
   219                                                                 EXtrrxns = [], Othertrrxns = []):
   220                                               """
   221                                               solver can be 'cplex', 'glpk' or 'gurobi'
   222                                               """
   223         1            1      1.0      0.0      if len(EXrxns) > 0:
   224                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   225                                                   random.shuffle(EXrxnsprune)
   226                                                   while EXrxnsprune:
   227                                                       rxn1 = EXrxnsprune.pop()
   228                                                       try:
   229                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   230                                                                             repetition, biomassRxn, lb_biomass)
   231                                                           EXrxnsprune2 = []
   232                                                           for k in mTemp1.idRs:
   233                                                               if k in EXrxnsprune:
   234                                                                   EXrxnsprune2.append(k)
   235                                                           random.shuffle(EXrxnsprune2)
   236                                                           EXrxnsprune = EXrxnsprune2
   237                                                       except NameError:
   238                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   239                                                                             repetition, biomassRxn, lb_biomass)
   240                                                           EXrxnsprune2 = []
   241                                                           for k in mTemp1.idRs:
   242                                                               if k in EXrxnsprune:
   243                                                                   EXrxnsprune2.append(k)
   244                                                           random.shuffle(EXrxnsprune2)
   245                                                           EXrxnsprune = EXrxnsprune2
   246         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   247                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   248                                                   EXtrrxnsprunelist = []
   249                                                   for j in EXtrrxnsprune:
   250                                                       if j in mTemp1.idRs:
   251                                                           EXtrrxnsprunelist.append(j)
   252                                                   random.shuffle(EXtrrxnsprune)
   253                                                   while EXtrrxnsprune:
   254                                                       rxn2 = EXtrrxnsprune.pop()
   255                                                       try:
   256                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   257                                                                             repetition, biomassRxn, lb_biomass)
   258                                                           EXtrrxnsprune2 = []
   259                                                           for k in mTemp1.idRs:
   260                                                               if k in EXtrrxnsprune:
   261                                                                   EXtrrxnsprune2.append(k)
   262                                                           random.shuffle(EXtrrxnsprune2)
   263                                                           EXtrrxnsprune = EXtrrxnsprune2
   264                                                       except NameError:
   265                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   266                                                                             repetition, biomassRxn, lb_biomass)
   267                                                           EXtrrxnsprune2 = []
   268                                                           for k in mTemp1.idRs:
   269                                                               if k in EXtrrxnsprune:
   270                                                                   EXtrrxnsprune2.append(k)
   271                                                           random.shuffle(EXtrrxnsprune2)
   272                                                           EXtrrxnsprune = EXtrrxnsprune2
   273                                           
   274         1            0      0.0      0.0      prunableRxns = []
   275         1            1      1.0      0.0      try:
   276         1            4      4.0      0.0          for j in mTemp1.idRs:
   277                                                       if j not in list(cH):
   278                                                           if j not in EXrxns:
   279                                                               if j not in EXtrrxns:
   280                                                                   if j not in Othertrrxns:
   281                                                                       prunableRxns.append(j)
   282         1            1      1.0      0.0      except NameError:
   283       747          400      0.5      0.0          for j in m.idRs:
   284       746         3813      5.1      0.0              if j not in list(cH):
   285       397          195      0.5      0.0                  if j not in EXrxns:
   286       397          183      0.5      0.0                      if j not in EXtrrxns:
   287       397          180      0.5      0.0                          if j not in Othertrrxns:
   288       397          245      0.6      0.0                              prunableRxns.append(j)
   289         1          258    258.0      0.0      random.shuffle(prunableRxns)
   290       117           79      0.7      0.0      while prunableRxns:
   291       116          130      1.1      0.0          rxn3 = prunableRxns.pop()
   292       116           65      0.6      0.0          try:
   293       116           84      0.7      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   294       115     49838444 433377.8     97.6                                repetition, biomassRxn, lb_biomass)
   295       115          153      1.3      0.0              prunableRxns2 = []
   296     51627        26808      0.5      0.1              for k in mTemp1.idRs:
   297     51512        54494      1.1      0.1                  if k in prunableRxns:
   298      8736         6837      0.8      0.0                      prunableRxns2.append(k)
   299       115         6588     57.3      0.0              random.shuffle(prunableRxns2)
   300       115          113      1.0      0.0              prunableRxns = prunableRxns2
   301                                                       #prunableRxns2_appended = prunableRxns.append()
   302                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   303                                                       #for k in mTemp1.idRs:
   304                                                       #    if k in prunableRxns:
   305                                                       #        prunableRxns2.append(k)
   306                                                       #random.shuffle(prunableRxns2_appended)
   307                                                       #prunableRxns = prunableRxns2_appended
   308         1            1      1.0      0.0          except NameError:
   309         1            0      0.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   310         1      1146954 1146954.0      2.2                                repetition, biomassRxn, lb_biomass)
   311         1            2      2.0      0.0              prunableRxns2 = []
   312       592          315      0.5      0.0              for k in mTemp1.idRs:
   313       591         1699      2.9      0.0                  if k in prunableRxns:
   314       242          139      0.6      0.0                      prunableRxns2.append(k)
   315         1          159    159.0      0.0              random.shuffle(prunableRxns2)
   316         1            2      2.0      0.0              prunableRxns = prunableRxns2
   317                                                       #prunableRxns2_appended = prunableRxns.append()
   318                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   319                                                       #random.shuffle(prunableRxns2_appended)
   320                                                       #prunableRxns = prunableRxns2_appended
   321                                                       #for k in mTemp1.idRs:
   322                                                       #    if k in prunableRxns:
   323                                                       #        prunableRxns2.append(k)
   324                                                       #random.shuffle(prunableRxns2)
   325                                                       #prunableRxns = prunableRxns2
   326         1            0      0.0      0.0      return mTemp1.idRs

