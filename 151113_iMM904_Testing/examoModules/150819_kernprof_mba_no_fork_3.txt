added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
added 2
R_ASNt2r
Wrote profile results to mba_no_fork.py.lprof
Timer unit: 1e-06 s

Total time: 9.96365 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       182          897      4.9      0.0          from numpy import array
    98       182        12551     69.0      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       182        47030    258.4      0.5          self.guro.setParam('OutputFlag', 0) 
   101     85949        47574      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102     85767      1925764     22.5     19.3              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       182        25040    137.6      0.3          self.guro.update()
   104                                                   # adding constraints
   105     74039       118634      1.6      1.2          for i, row in enumerate(self.S.toarray()):
   106     73857       280766      3.8      2.8              nz = row.nonzero()[0]
   107     73857      2592419     35.1     26.0              pair = zip(row[nz], array(self.idRs)[nz])
   108     73857        42899      0.6      0.4              s = ''
   109    293450       155465      0.5      1.6              for p in pair:
   110    219593       407318      1.9      4.1                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111     73857        65985      0.9      0.7              s = s.rstrip(' + ')
   112     73857        42543      0.6      0.4              s += ' == %s' % 0.
   113     73857      4198762     56.8     42.1              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 20.6545 s
File: mba_no_fork.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       182          208      1.1      0.0      act = set()
    71       182         5878     32.3      0.0      arrayIdRs = array(cbm.idRs[:])
    72       182     10630062  58406.9     51.5      init = cbm.initLp()
    73       182          146      0.8      0.0      init 
    74       182          152      0.8      0.0      if rl:
    75       182          103      0.6      0.0          idRs = rl
    76                                               else:
    77                                                   idRs = cbm.idRs[:]
    78                                               # maximizing all reactions at once
    79                                               # reseting the objective
    80       182         5833     32.0      0.0      cbm.guro.setObjective(0)
    81                                               # setting the objective
    82       182          124      0.7      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    83     85949        58891      0.7      0.3      for var in cbm.guro.getVars():
    84     85767       225031      2.6      1.1          s += 'cbm.%s, ' % var.varName
    85       182          599      3.3      0.0      s = s.rstrip(', ')
    86       182          356      2.0      0.0      s += '])'
    87       182       148481    815.8      0.7      exec s
    88                                               #EG Initially set the objective to maximize
    89       182        33204    182.4      0.2      cbm.guro.setObjective(cbm.linobj)#1 for maximize
    90       182       284046   1560.7      1.4      cbm.guro.optimize()
    91     71074       119796      1.7      0.6      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    92       148         1760     11.9      0.0      indices = (sol > thresh).nonzero()[0]
    93       148         4867     32.9      0.0      act.update(arrayIdRs[indices])
    94       148         5708     38.6      0.0      idRs = list(set(idRs) - act)
    95                                               # maximizing
    96     23655        12716      0.5      0.1      for rxn in idRs:
    97     23507        14247      0.6      0.1          if rxn not in act:
    98                                                   #EG Reduce the number of reactions that need to be investigated
    99                                                   #based off of upper boundary constraints
   100      6037        33919      5.6      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   101                                                           # reseting the objective
   102      6037       147385     24.4      0.7                  cbm.guro.setObjective(0)
   103      6037       328032     54.3      1.6                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   104      6037      3505794    580.7     17.0                  cbm.guro.optimize()
   105   2933838      4618505      1.6     22.4                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   106      6037        52513      8.7      0.3                  indices = (sol > thresh).nonzero()[0]
   107                                                           #act2 = act.copy()
   108      6037       249114     41.3      1.2                  act.update(arrayIdRs[indices])
   109                                                           #if act2 != act:
   110                                                               #print "added 1"
   111                                                               #if rxn in act:
   112                                                                   #print rxn
   113       148         2395     16.2      0.0      idRs = list(set(idRs) - act)
   114                                               # minimizing
   115       279          194      0.7      0.0      for rxn in idRs:
   116       131           80      0.6      0.0          if rxn not in act:
   117                                                   #EG Reduce the number of reactions that need to be investigated
   118                                                   #based off of lower boundary constraints
   119       131          513      3.9      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   120                                                           # reseting the objective
   121       131         3066     23.4      0.0                  cbm.guro.setObjective(0)
   122       131         7284     55.6      0.0                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   123       131        51697    394.6      0.3                  cbm.guro.optimize()
   124     59026        93641      1.6      0.5                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   125       131         1091      8.3      0.0                  indices = (sol > thresh).nonzero()[0]
   126       131         1482     11.3      0.0                  act2 = act.copy()
   127       131         4441     33.9      0.0                  act.update(arrayIdRs[indices])
   128       131          986      7.5      0.0                  if act2 != act:
   129         7           38      5.4      0.0                      print "added 2"
   130         7            5      0.7      0.0                      if rxn in act:
   131         7            7      1.0      0.0                          print rxn
   132       148           82      0.6      0.0      return act

Total time: 53.1414 s
File: mba_no_fork.py
Function: pruneRxn at line 134

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   134                                           @profile
   135                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   136                                                        lb_biomass):
   137       124           77      0.6      0.0      try:
   138                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   139                                                   #or if the biomass flux becomes inactive, stop pruning.
   140       124           82      0.7      0.0          rxntodelete = rxn
   141       124      7077616  57077.5     13.3          m0 = deleteCbmRxns(cbm, rxntodelete)
   142                                                   #NOTE the threshold for is set a bit higher for cH rxns
   143       124     14337855 115627.9     27.0          act = findActiveRxns(m0, thresh, cH)
   144        90         2786     31.0      0.0          cH_act = cH & act
   145        90          739      8.2      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   146                                                       #print "not all active 1"
   147        32           22      0.7      0.0              return cbm
   148                                                   #######################################################################
   149                                                   # INPUTS
   150        58           33      0.6      0.0          eps = 1E-10
   151        58           27      0.5      0.0          activityThreshold = 1E-10
   152        58           25      0.4      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   153                                                   #######################################################################
   154                                                   # STATEMENTS
   155        58        15031    259.2      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   156        58         3718     64.1      0.0          hfr = hfr & set(m0.idRs)
   157                                                   #forcing biomass production
   158        58          317      5.5      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   159                                                   #minimizingg the sum of fluxes
   160        58       604801  10427.6      1.1          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   161        58      8468389 146006.7     15.9          mtry1result.initMipGurobi()
   162        58       723751  12478.5      1.4          mtry1result.minSumFluxes_gurobi()
   163                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   164                                                   #function, so that the reactants and products could be written out
   165        58       641026  11052.2      1.2          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   166        36           32      0.9      0.0      except:
   167                                                   #print "exception 1"
   168        36           18      0.5      0.0          return cbm
   169                                                   #EG Identify the reactions that became inactive after the
   170                                                   #reaction was deleted. If extra deleted reactions cause the
   171                                                   #model to be unsolvable, or if extra deleted inactive reactions
   172                                                   #cause any of the hfrs to become inactive, or if a solution
   173                                                   #cannot be obtained with a biomass flux, only delete the one
   174                                                   #reaction. Otherwise, delete the inactive reactions.
   175        56           76      1.4      0.0      try:
   176        56         4444     79.4      0.0          inact = set(m0.idRs) - act - cH
   177        56      3446181  61538.9      6.5          m1 = deleteCbmRxns(m0, inact)
   178        56      7766024 138679.0     14.6          act2 = findActiveRxns(m1, thresh, cH)
   179        56         1653     29.5      0.0          cH_act2 = cH & act2
   180        56          427      7.6      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   181                                                       #print rxntodelete
   182                                                       return m0
   183                                                   ###################################################################
   184                                                   # INPUTS
   185        56           23      0.4      0.0          eps = 1E-10
   186        56           29      0.5      0.0          activityThreshold = 1E-10
   187        56           31      0.6      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   188                                                   ###################################################################
   189                                                   # STATEMENTS
   190        56        13897    248.2      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   191        56         3473     62.0      0.0          hfr = hfr & set(m1.idRs)
   192                                                   #forcing biomass production
   193        56          311      5.6      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   194                                                   #minimizing the sum of fluxes
   195        56       578921  10337.9      1.1          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   196        56      8093069 144519.1     15.2          mtry2result.initMipGurobi()
   197        56       702068  12536.9      1.3          mtry2result.minSumFluxes_gurobi()
   198                                                   #EG Added activityThreshold and the m1.rxns dictionary
   199                                                   #to the function, so that the reactants and products could
   200                                                   #be written out
   201        56       654336  11684.6      1.2          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   202                                                   #print inact
   203        56           74      1.3      0.0          return m1
   204                                               except:
   205                                                   #print "exception 2"
   206                                                   return m0

Total time: 53.4491 s
File: mba_no_fork.py
Function: iterativePrunning at line 211

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   211                                           @profile
   212                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   213                                                                 repetition, thresh = 1E-10, EXrxns = [],
   214                                                                 EXtrrxns = [], Othertrrxns = []):
   215                                               """
   216                                               solver can be 'cplex', 'glpk' or 'gurobi'
   217                                               """
   218         1            2      2.0      0.0      if len(EXrxns) > 0:
   219                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   220                                                   random.shuffle(EXrxnsprune)
   221                                                   while EXrxnsprune:
   222                                                       rxn1 = EXrxnsprune.pop()
   223                                                       try:
   224                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   225                                                                             repetition, biomassRxn, lb_biomass)
   226                                                           EXrxnsprune2 = []
   227                                                           for k in mTemp1.idRs:
   228                                                               if k in EXrxnsprune:
   229                                                                   EXrxnsprune2.append(k)
   230                                                           random.shuffle(EXrxnsprune2)
   231                                                           EXrxnsprune = EXrxnsprune2
   232                                                       except NameError:
   233                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   234                                                                             repetition, biomassRxn, lb_biomass)
   235                                                           EXrxnsprune2 = []
   236                                                           for k in mTemp1.idRs:
   237                                                               if k in EXrxnsprune:
   238                                                                   EXrxnsprune2.append(k)
   239                                                           random.shuffle(EXrxnsprune2)
   240                                                           EXrxnsprune = EXrxnsprune2
   241         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   242                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   243                                                   EXtrrxnsprunelist = []
   244                                                   for j in EXtrrxnsprune:
   245                                                       if j in mTemp1.idRs:
   246                                                           EXtrrxnsprunelist.append(j)
   247                                                   random.shuffle(EXtrrxnsprune)
   248                                                   while EXtrrxnsprune:
   249                                                       rxn2 = EXtrrxnsprune.pop()
   250                                                       try:
   251                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   252                                                                             repetition, biomassRxn, lb_biomass)
   253                                                           EXtrrxnsprune2 = []
   254                                                           for k in mTemp1.idRs:
   255                                                               if k in EXtrrxnsprune:
   256                                                                   EXtrrxnsprune2.append(k)
   257                                                           random.shuffle(EXtrrxnsprune2)
   258                                                           EXtrrxnsprune = EXtrrxnsprune2
   259                                                       except NameError:
   260                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   261                                                                             repetition, biomassRxn, lb_biomass)
   262                                                           EXtrrxnsprune2 = []
   263                                                           for k in mTemp1.idRs:
   264                                                               if k in EXtrrxnsprune:
   265                                                                   EXtrrxnsprune2.append(k)
   266                                                           random.shuffle(EXtrrxnsprune2)
   267                                                           EXtrrxnsprune = EXtrrxnsprune2
   268                                           
   269         1            0      0.0      0.0      prunableRxns = []
   270         1            1      1.0      0.0      try:
   271         1            4      4.0      0.0          for j in mTemp1.idRs:
   272                                                       if j not in list(cH):
   273                                                           if j not in EXrxns:
   274                                                               if j not in EXtrrxns:
   275                                                                   if j not in Othertrrxns:
   276                                                                       prunableRxns.append(j)
   277         1            1      1.0      0.0      except NameError:
   278       747          379      0.5      0.0          for j in m.idRs:
   279       746         3700      5.0      0.0              if j not in list(cH):
   280       397          210      0.5      0.0                  if j not in EXrxns:
   281       397          198      0.5      0.0                      if j not in EXtrrxns:
   282       397          199      0.5      0.0                          if j not in Othertrrxns:
   283       397          226      0.6      0.0                              prunableRxns.append(j)
   284         1          244    244.0      0.0      random.shuffle(prunableRxns)
   285       125           90      0.7      0.0      while prunableRxns:
   286       124          133      1.1      0.0          rxn3 = prunableRxns.pop()
   287       124           76      0.6      0.0          try:
   288       124           95      0.8      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   289       123     52220436 424556.4     97.7                                repetition, biomassRxn, lb_biomass)
   290       123          160      1.3      0.0              prunableRxns2 = []
   291     56596        28634      0.5      0.1              for k in mTemp1.idRs:
   292     56473        60590      1.1      0.1                  if k in prunableRxns:
   293     10325         7841      0.8      0.0                      prunableRxns2.append(k)
   294       123         7155     58.2      0.0              random.shuffle(prunableRxns2)
   295       123          131      1.1      0.0              prunableRxns = prunableRxns2
   296                                                       #prunableRxns2_appended = prunableRxns.append()
   297                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   298                                                       #for k in mTemp1.idRs:
   299                                                       #    if k in prunableRxns:
   300                                                       #        prunableRxns2.append(k)
   301                                                       #random.shuffle(prunableRxns2_appended)
   302                                                       #prunableRxns = prunableRxns2_appended
   303         1            1      1.0      0.0          except NameError:
   304         1            1      1.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   305         1      1116459 1116459.0      2.1                                repetition, biomassRxn, lb_biomass)
   306         1            1      1.0      0.0              prunableRxns2 = []
   307       589          290      0.5      0.0              for k in mTemp1.idRs:
   308       588         1613      2.7      0.0                  if k in prunableRxns:
   309       239          124      0.5      0.0                      prunableRxns2.append(k)
   310         1          143    143.0      0.0              random.shuffle(prunableRxns2)
   311         1            2      2.0      0.0              prunableRxns = prunableRxns2
   312                                                       #prunableRxns2_appended = prunableRxns.append()
   313                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   314                                                       #random.shuffle(prunableRxns2_appended)
   315                                                       #prunableRxns = prunableRxns2_appended
   316                                                       #for k in mTemp1.idRs:
   317                                                       #    if k in prunableRxns:
   318                                                       #        prunableRxns2.append(k)
   319                                                       #random.shuffle(prunableRxns2)
   320                                                       #prunableRxns = prunableRxns2
   321         1            0      0.0      0.0      return mTemp1.idRs

Total time: 0.000208 s
File: utilities.py
Function: exportPickle at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def exportPickle(obj, fileName, mode = 'wb', protocol = -1):
    36                                               """
    37                                               Exports an object as a pickle file. By default it writes as binary (wb).
    38                                               Setting mode allows other ways of opening the file (e.g. mode = 'w')
    39                                               """
    40         1           24     24.0     11.5      import cPickle as pickle
    41         1           30     30.0     14.4      f = open(fileName, mode)
    42         1          141    141.0     67.8      pickle.dump(obj, f, protocol = -1)
    43         1           13     13.0      6.2      f.close()

