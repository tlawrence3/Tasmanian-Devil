set(['R_ALCD26xim', 'R_2MBALDtm', 'R_TMN', 'R_EX_2mppal_e_', 'R_SUCCt2r', 'R_LPP_SC', 'R_ALCD24xim', 'R_EX_pap_e_', 'R_PAK_SC', 'R_ACHLE1', 'R_FBP26', 'R_ASNt7', 'R_LEUt6', 'R_LEUt7', 'R_EX_iamac_e_', 'R_DNMPPA', 'R_CITt2r', 'R_EX_succ_e_', 'R_FTHFCLm', 'R_ALCD2irm', 'R_2MPPALt', 'R_ALCD22yi', 'R_DIAT', 'R_PHEACt', 'R_PI35BP5P_SC', 'R_ACESt', 'R_ILEt6', 'R_ILEt7', 'R_DPR', 'R_EX_hxan_e_', 'R_DNTPPA', 'R_IAMOHtm', 'R_D_LACDm', 'R_PYDAMK', 'R_PMI12346PS', 'R_EX_ergst_e_', 'R_EX_aces_e_', 'R_EX_ibutac_e_', 'R_TREHv', 'R_ALCD23yi', 'R_PMI12346PH', 'R_HYPOE', 'R_HETZK', 'R_FDNG', 'R_ETOHtm', 'R_IBUTACt', 'R_TREt2v', 'R_NADPPPSm', 'R_ALCD25yi', 'R_POLYAO2', 'R_POLYAO3', 'R_IND3ETHtm', 'R_PI3P5K_SC', 'R_ALCD22xim', 'R_EX_pyr_e_', 'R_PMI1346PH', 'R_PI45BP5P_SC', 'R_PMI1346PS', 'R_TYRt6', 'R_PFK26', 'R_EX_3mop_e_', 'R_TYRTAim', 'R_ASPGLU2m', 'R_DRTPPD', 'R_PMDPHT', 'R_13BGH', 'R_NTD1', 'R_NTD5', 'R_NTD7', 'R_NTD6', 'R_GLNt7', 'R_GLNt6', 'R_ERGSTt', 'R_PDE1', 'R_G6Pter', 'R_PACALDtm', 'R_THRt2m', 'R_EX_ac_e_', 'R_ACHLE3', 'R_HSDyi', 'R_EX_pheac_e_', 'R_ID3ACALDtm', 'R_HXANt2r', 'R_ICDHxm', 'R_OHACT1', 'R_OHACT2', 'R_OHACT3', 'R_OHACT5', 'R_ALCD24yi', 'R_DROPPRy', 'R_EX_2mbac_e_', 'R_EX_xan_e_', 'R_2MBTOHtm', 'R_RNDR4', 'R_THRD_Lm', 'R_GLYCt2', 'R_IBUTOHtm', 'R_DB4PS', 'R_PAPt', 'R_TMDPP', 'R_6PGLter', 'R_SPRMS', 'R_XANt', 'R_MEVK3', 'R_MEVK2', 'R_EX_akg_e_', 'R_MEVK4', 'R_NADKm', 'R_ACALDt', 'R_PUNP2', 'R_3MBALDtm', 'R_THYMt3r', 'R_2PHETOHtm', 'R_D_LACt2', 'R_ATPATF1', 'R_ALCD23xim', 'R_ASNt6', 'R_TMDK1', 'R_IAMACt', 'R_G3PD1ir', 'R_ALCD25xim', 'R_EX_lac_D_e_', 'R_EX_thym_e_', 'R_RNDR2', 'R_RNDR3', 'R_RNDR1', 'R_GTPCII', 'R_FOLD3m', 'R_EX_cit_e_', 'R_2MPPALtm', 'R_TYRt7', 'R_G6PDH2er', 'R_GLUt5m', 'R_PI4P5K_SC', 'R_HPPKm', 'R_RBFSb', 'R_RBFSa', 'R_EX_acald_e_', 'R_AP4AHr', 'R_THFATm', 'R_3MOPt', 'R_2MBACt'])
set(['R_ACHLE2', 'R_GAM6Pt', 'R_KYN', 'R_LGTHL', 'R_PYR5CDm', 'R_ALDD2xm', 'R_EX_pacald_e_', 'R_OHACT4', 'R_PAPtm', 'R_GLCGSDv', 'R_D_LACDcm', 'R_EX_oaa_e_', 'R_EX_mal_L_e_', 'R_C22STDS', 'R_3C3HMPt', 'R_GLCNtv', 'R_ACPSm', 'R_EX_gam6p_e_', 'R_C5STDS', 'R_G5SADrm', 'R_GLYOX', 'R_THIORDXp', 'R_PACALDt', 'R_PAN4Ptm', 'R_ABUTt2r', 'R_GLCtv', 'R_BPNT', 'R_OAAt', 'R_EX_4abut_e_', 'R_TRDRDtp', 'R_C8STI', 'R_EX_3c3hmp_e_'])
set(['R_FAS80COA_L', 'R_PUNP7', 'R_EX_sbt_D_e_', 'R_FAS120COA', 'R_ACCOACr', 'R_GLXt', 'R_FACOAL140', 'R_NTD9', 'R_PPNDH', 'R_SBT_Dt', 'R_TTDCAtr', 'R_FAS100COA', 'R_EX_glx_e_', 'R_NTD10', 'R_FAS140COA', 'R_EX_ttdca_e_'])
set(['R_EX_dttp_e_', 'R_DTTPt'])
set(['R_EX_zymst_e_', 'R_ZYMSTt', 'R_ACACT1'])
set(['R_DCTPD', 'R_EX_thm_e_'])
not all active 1
not all active 1
set(['R_EX_orn_e_'])
exception 1
set(['R_PROtm', 'R_P5CDm'])
exception 1
set(['R_GSNK', 'R_PUNP3', 'R_EX_for_e_'])
set([])
set(['R_34HPPt2m', 'R_34HPLFM', 'R_EX_2hb_e_', 'R_4HBZCOAFm', 'R_T4HCINNMFM', 'R_4HBZFm', 'R_2HBO', 'R_2HBt2'])
exception 1
not all active 1
set(['R_HSK'])
not all active 1
R_GLUK
exception 2
exception 2
exception 1
exception 2
not all active 1
exception 2
not all active 1
exception 2
R_FUM
exception 1
R_ACLSm
exception 2
exception 2
exception 2
exception 1
exception 1
exception 1
set(['R_KARA1im', 'R_DHAD1m', 'R_DHORDi', 'R_FECOSTt', 'R_4ABZt', 'R_SAM24MT', 'R_EX_3mbald_e_', 'R_AKGt2r', 'R_ILEt2r', 'R_AKGMAL'])
set(['R_ME2m'])
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
not all active 1
set(['R_GLYGS', 'R_GBEZ', 'R_UGLT', 'R_TREH'])
exception 2
R_PYRt2m
not all active 1
exception 2
set(['R_ASPTAm', 'R_ACOAHim'])
set(['R_CYSTS', 'R_ICDHy', 'R_EX_trp_L_e_'])
exception 1
exception 1
exception 2
not all active 1
exception 1
set(['R_ALAt2r', 'R_TYRt2r', 'R_INSK'])
set(['R_FBP', 'R_GLUN'])
set(['R_EX_glu_L_e_'])
set(['R_SUCOASm'])
not all active 1
exception 1
not all active 1
not all active 1
set([])
exception 1
set(['R_GLYt2r'])
set(['R_ASPt5n'])
exception 1
not all active 1
not all active 1
exception 1
not all active 1
exception 1
set([])
not all active 1
not all active 1
set([])
exception 1
not all active 1
exception 1
exception 1
exception 1
not all active 1
exception 1
not all active 1
set([])
set(['R_EX_ser_L_e_'])
exception 1
set(['R_EX_his_L_e_'])
exception 1
not all active 1
set(['R_MALOAAtp'])
set([])
exception 1
not all active 1
exception 1
exception 1
set(['R_ADK4'])
set([])
not all active 1
set(['R_EX_id3acald_e_'])
set([])
set(['R_EX_arg_L_e_'])
not all active 1
exception 1
exception 1
set([])
not all active 1
exception 1
not all active 1
set(['R_ACt2r'])
exception 1
exception 1
not all active 1
not all active 1
exception 1
not all active 1
not all active 1
set([])
exception 2
exception 1
not all active 1
exception 1
exception 1
not all active 1
exception 1
exception 2
exception 1
exception 2
not all active 1
exception 1
not all active 1
not all active 1
exception 1
exception 1
exception 1
exception 1
exception 1
exception 2
set(['R_CO2t'])
not all active 1
exception 1
not all active 1
exception 2
exception 1
exception 1
Wrote profile results to mba_no_fork.py.lprof
Timer unit: 1e-06 s

Total time: 12.366 s
File: examo.py
Function: initLp at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def initLp(self, name = 'unnamed'):
    97       210         1047      5.0      0.0          from numpy import array
    98       210        16139     76.9      0.1          self.guro = Model(name)
    99                                                   #turning off the writing of the gurobi.log file
   100       210        54899    261.4      0.4          self.guro.setParam('OutputFlag', 0) 
   101    101401        64162      0.6      0.5          for i, rxn in enumerate(self.idRs):
   102    101191      2410324     23.8     19.5              exec 'self.%s = self.guro.addVar(lb = %f, ub = %f, vtype = GRB.CONTINUOUS, name = "%s")' % (rxn, self.lb[i], self.ub[i], rxn)
   103       210        32088    152.8      0.3          self.guro.update()
   104                                                   # adding constraints
   105     87454       151277      1.7      1.2          for i, row in enumerate(self.S.toarray()):
   106     87244       350541      4.0      2.8              nz = row.nonzero()[0]
   107     87244      3200651     36.7     25.9              pair = zip(row[nz], array(self.idRs)[nz])
   108     87244        53906      0.6      0.4              s = ''
   109    347192       193320      0.6      1.6              for p in pair:
   110    259948       510981      2.0      4.1                  s += '(%s * self.%s) + ' % (p[0], p[1])
   111     87244        79317      0.9      0.6              s = s.rstrip(' + ')
   112     87244        52000      0.6      0.4              s += ' == %s' % 0.
   113     87244      5195325     59.5     42.0              exec 'self.guro.addConstr( %s, "%s")' % (s, self.idSp[i])

Total time: 25.9991 s
File: mba_no_fork.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       210          238      1.1      0.0      act = set()
    71       210         7228     34.4      0.0      arrayIdRs = array(cbm.idRs[:])
    72       210     13235090  63024.2     50.9      init = cbm.initLp()
    73       210          149      0.7      0.0      init 
    74       210          171      0.8      0.0      if rl:
    75       210          103      0.5      0.0          idRs = rl
    76                                               else:
    77                                                   idRs = cbm.idRs[:]
    78                                               # maximizing all reactions at once
    79                                               # reseting the objective
    80       210         7842     37.3      0.0      cbm.guro.setObjective(0)
    81                                               # setting the objective
    82       210          140      0.7      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    83    101401        72541      0.7      0.3      for var in cbm.guro.getVars():
    84    101191       270198      2.7      1.0          s += 'cbm.%s, ' % var.varName
    85       210          709      3.4      0.0      s = s.rstrip(', ')
    86       210          414      2.0      0.0      s += '])'
    87       210       180617    860.1      0.7      exec s
    88                                               #EG Initially set the objective to maximize
    89       210        40719    193.9      0.2      cbm.guro.setObjective(cbm.linobj)#1 for maximize
    90       210       341319   1625.3      1.3      cbm.guro.optimize()
    91     83916       141581      1.7      0.5      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    92       172         2149     12.5      0.0      indices = (sol > thresh).nonzero()[0]
    93       172         5804     33.7      0.0      act.update(arrayIdRs[indices])
    94       172         6946     40.4      0.0      idRs = list(set(idRs) - act)
    95                                               # maximizing
    96     28441        15485      0.5      0.1      for rxn in idRs:
    97     28269        17498      0.6      0.1          if rxn not in act:
    98                                                   #EG Reduce the number of reactions that need to be investigated
    99                                                   #based off of upper boundary constraints
   100      7159        45659      6.4      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   101                                                           # reseting the objective
   102      7159       188460     26.3      0.7                  cbm.guro.setObjective(0)
   103      7159       412904     57.7      1.6                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   104      7159      4356694    608.6     16.8                  cbm.guro.optimize()
   105   3525173      5895022      1.7     22.7                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   106      7159        65061      9.1      0.3                  indices = (sol > thresh).nonzero()[0]
   107                                                           #act2 = act.copy()
   108      7159       298740     41.7      1.1                  act.update(arrayIdRs[indices])
   109                                                           #if act2 != act:
   110                                                               #print "added 1"
   111                                                               #if rxn in act:
   112                                                                   #print rxn
   113       172         3230     18.8      0.0      idRs = list(set(idRs) - act)
   114                                               # minimizing
   115       356          262      0.7      0.0      for rxn in idRs:
   116       184          120      0.7      0.0          if rxn not in act:
   117                                                   #EG Reduce the number of reactions that need to be investigated
   118                                                   #based off of lower boundary constraints
   119       184          903      4.9      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   120                                                           # reseting the objective
   121       184         4737     25.7      0.0                  cbm.guro.setObjective(0)
   122       184        10539     57.3      0.0                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   123       184        75397    409.8      0.3                  cbm.guro.optimize()
   124     86110       144364      1.7      0.6                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   125     86110       141684      1.6      0.5                  sol_no_absolute = array([v.x for v in cbm.guro.getVars()])
   126       184         1835     10.0      0.0                  indices = (sol > thresh).nonzero()[0]
   127                                                           #act2 = act.copy()
   128       184         6415     34.9      0.0                  act.update(arrayIdRs[indices])
   129                                                           #if act2 != act:
   130                                                               #print "added 2"
   131                                                               #if rxn in act:
   132                                                                   #print rxn
   133                                                                   #print sol
   134                                                                   #print sol_no_absolute
   135                                                                   #print indices
   136                                                                   #print arrayIdRs
   137       172           93      0.5      0.0      return act

Total time: 63.8817 s
File: mba_no_fork.py
Function: pruneRxn at line 139

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   139                                           @profile
   140                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   141                                                        lb_biomass):
   142       148          122      0.8      0.0      try:
   143                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   144                                                   #or if the biomass flux becomes inactive, stop pruning.
   145       148           91      0.6      0.0          rxntodelete = rxn
   146       148      9272130  62649.5     14.5          m0 = deleteCbmRxns(cbm, rxntodelete)
   147                                                   #NOTE the threshold for is set a bit higher for cH rxns
   148       148     19099668 129051.8     29.9          act = findActiveRxns(m0, thresh, cH)
   149       110         3657     33.2      0.0          cH_act = cH & act
   150       110          936      8.5      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   151        42          140      3.3      0.0              print "not all active 1"
   152        42           33      0.8      0.0              return cbm
   153                                                   #######################################################################
   154                                                   # INPUTS
   155        68           30      0.4      0.0          eps = 1E-10
   156        68           37      0.5      0.0          activityThreshold = 1E-10
   157        68           36      0.5      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   158                                                   #######################################################################
   159                                                   # STATEMENTS
   160        68        17956    264.1      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   161        68         4529     66.6      0.0          hfr = hfr & set(m0.idRs)
   162                                                   #forcing biomass production
   163        68          402      5.9      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   164                                                   #minimizingg the sum of fluxes
   165        68       735644  10818.3      1.2          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   166        68     10475172 154046.6     16.4          mtry1result.initMipGurobi()
   167        68       868954  12778.7      1.4          mtry1result.minSumFluxes_gurobi()
   168                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   169                                                   #function, so that the reactants and products could be written out
   170        68       718121  10560.6      1.1          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   171        46           39      0.8      0.0      except:
   172        46          144      3.1      0.0          print "exception 1"
   173        46           26      0.6      0.0          return cbm
   174                                                   #EG Identify the reactions that became inactive after the
   175                                                   #reaction was deleted. If extra deleted reactions cause the
   176                                                   #model to be unsolvable, or if extra deleted inactive reactions
   177                                                   #cause any of the hfrs to become inactive, or if a solution
   178                                                   #cannot be obtained with a biomass flux, only delete the one
   179                                                   #reaction. Otherwise, delete the inactive reactions.
   180        60           81      1.4      0.0      try:
   181        60         4760     79.3      0.0          inact = set(m0.idRs) - act - cH
   182        60      3858901  64315.0      6.0          m1 = deleteCbmRxns(m0, inact)
   183        60      8654705 144245.1     13.5          act2 = findActiveRxns(m1, thresh, cH)
   184        60         1839     30.6      0.0          cH_act2 = cH & act2
   185        60          478      8.0      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   186         4           12      3.0      0.0              print rxntodelete
   187         4            3      0.8      0.0              return m0
   188                                                   ###################################################################
   189                                                   # INPUTS
   190        56           31      0.6      0.0          eps = 1E-10
   191        56           28      0.5      0.0          activityThreshold = 1E-10
   192        56           30      0.5      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   193                                                   ###################################################################
   194                                                   # STATEMENTS
   195        56        14368    256.6      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   196        56         3496     62.4      0.0          hfr = hfr & set(m1.idRs)
   197                                                   #forcing biomass production
   198        56          311      5.6      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   199                                                   #minimizing the sum of fluxes
   200        56       575884  10283.6      0.9          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   201        56      8407779 150138.9     13.2          mtry2result.initMipGurobi()
   202        56       668640  11940.0      1.0          mtry2result.minSumFluxes_gurobi()
   203                                                   #EG Added activityThreshold and the m1.rxns dictionary
   204                                                   #to the function, so that the reactants and products could
   205                                                   #be written out
   206        56       491932   8784.5      0.8          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   207        40          446     11.2      0.0          print inact
   208        40           34      0.8      0.0          return m1
   209        16           17      1.1      0.0      except:
   210        16           56      3.5      0.0          print "exception 2"
   211        16           10      0.6      0.0          return m0

Total time: 64.2441 s
File: mba_no_fork.py
Function: iterativePrunning at line 216

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   216                                           @profile
   217                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   218                                                                 repetition, thresh = 1E-10, EXrxns = [],
   219                                                                 EXtrrxns = [], Othertrrxns = []):
   220                                               """
   221                                               solver can be 'cplex', 'glpk' or 'gurobi'
   222                                               """
   223         1            2      2.0      0.0      if len(EXrxns) > 0:
   224                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   225                                                   random.shuffle(EXrxnsprune)
   226                                                   while EXrxnsprune:
   227                                                       rxn1 = EXrxnsprune.pop()
   228                                                       try:
   229                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   230                                                                             repetition, biomassRxn, lb_biomass)
   231                                                           EXrxnsprune2 = []
   232                                                           for k in mTemp1.idRs:
   233                                                               if k in EXrxnsprune:
   234                                                                   EXrxnsprune2.append(k)
   235                                                           random.shuffle(EXrxnsprune2)
   236                                                           EXrxnsprune = EXrxnsprune2
   237                                                       except NameError:
   238                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   239                                                                             repetition, biomassRxn, lb_biomass)
   240                                                           EXrxnsprune2 = []
   241                                                           for k in mTemp1.idRs:
   242                                                               if k in EXrxnsprune:
   243                                                                   EXrxnsprune2.append(k)
   244                                                           random.shuffle(EXrxnsprune2)
   245                                                           EXrxnsprune = EXrxnsprune2
   246         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   247                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   248                                                   EXtrrxnsprunelist = []
   249                                                   for j in EXtrrxnsprune:
   250                                                       if j in mTemp1.idRs:
   251                                                           EXtrrxnsprunelist.append(j)
   252                                                   random.shuffle(EXtrrxnsprune)
   253                                                   while EXtrrxnsprune:
   254                                                       rxn2 = EXtrrxnsprune.pop()
   255                                                       try:
   256                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   257                                                                             repetition, biomassRxn, lb_biomass)
   258                                                           EXtrrxnsprune2 = []
   259                                                           for k in mTemp1.idRs:
   260                                                               if k in EXtrrxnsprune:
   261                                                                   EXtrrxnsprune2.append(k)
   262                                                           random.shuffle(EXtrrxnsprune2)
   263                                                           EXtrrxnsprune = EXtrrxnsprune2
   264                                                       except NameError:
   265                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   266                                                                             repetition, biomassRxn, lb_biomass)
   267                                                           EXtrrxnsprune2 = []
   268                                                           for k in mTemp1.idRs:
   269                                                               if k in EXtrrxnsprune:
   270                                                                   EXtrrxnsprune2.append(k)
   271                                                           random.shuffle(EXtrrxnsprune2)
   272                                                           EXtrrxnsprune = EXtrrxnsprune2
   273                                           
   274         1            1      1.0      0.0      prunableRxns = []
   275         1            1      1.0      0.0      try:
   276         1            3      3.0      0.0          for j in mTemp1.idRs:
   277                                                       if j not in list(cH):
   278                                                           if j not in EXrxns:
   279                                                               if j not in EXtrrxns:
   280                                                                   if j not in Othertrrxns:
   281                                                                       prunableRxns.append(j)
   282         1            1      1.0      0.0      except NameError:
   283       747          398      0.5      0.0          for j in m.idRs:
   284       746         3770      5.1      0.0              if j not in list(cH):
   285       397          192      0.5      0.0                  if j not in EXrxns:
   286       397          197      0.5      0.0                      if j not in EXtrrxns:
   287       397          185      0.5      0.0                          if j not in Othertrrxns:
   288       397          221      0.6      0.0                              prunableRxns.append(j)
   289         1          234    234.0      0.0      random.shuffle(prunableRxns)
   290       149          103      0.7      0.0      while prunableRxns:
   291       148          157      1.1      0.0          rxn3 = prunableRxns.pop()
   292       148           73      0.5      0.0          try:
   293       148          115      0.8      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   294       147     62933610 428119.8     98.0                                repetition, biomassRxn, lb_biomass)
   295       147          197      1.3      0.0              prunableRxns2 = []
   296     70203        36428      0.5      0.1              for k in mTemp1.idRs:
   297     70056        77750      1.1      0.1                  if k in prunableRxns:
   298     13120         9803      0.7      0.0                      prunableRxns2.append(k)
   299       147         9271     63.1      0.0              random.shuffle(prunableRxns2)
   300       147          157      1.1      0.0              prunableRxns = prunableRxns2
   301                                                       #prunableRxns2_appended = prunableRxns.append()
   302                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   303                                                       #for k in mTemp1.idRs:
   304                                                       #    if k in prunableRxns:
   305                                                       #        prunableRxns2.append(k)
   306                                                       #random.shuffle(prunableRxns2_appended)
   307                                                       #prunableRxns = prunableRxns2_appended
   308         1            1      1.0      0.0          except NameError:
   309         1            1      1.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   310         1      1168982 1168982.0      1.8                                repetition, biomassRxn, lb_biomass)
   311         1            2      2.0      0.0              prunableRxns2 = []
   312       604          292      0.5      0.0              for k in mTemp1.idRs:
   313       603         1661      2.8      0.0                  if k in prunableRxns:
   314       254          166      0.7      0.0                      prunableRxns2.append(k)
   315         1          153    153.0      0.0              random.shuffle(prunableRxns2)
   316         1            1      1.0      0.0              prunableRxns = prunableRxns2
   317                                                       #prunableRxns2_appended = prunableRxns.append()
   318                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   319                                                       #random.shuffle(prunableRxns2_appended)
   320                                                       #prunableRxns = prunableRxns2_appended
   321                                                       #for k in mTemp1.idRs:
   322                                                       #    if k in prunableRxns:
   323                                                       #        prunableRxns2.append(k)
   324                                                       #random.shuffle(prunableRxns2)
   325                                                       #prunableRxns = prunableRxns2
   326         1            0      0.0      0.0      return mTemp1.idRs

