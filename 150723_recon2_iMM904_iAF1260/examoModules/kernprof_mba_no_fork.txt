Wrote profile results to mba_3.py.lprof
Timer unit: 1e-06 s

Total time: 23.3401 s
File: mba_3.py
Function: findActiveRxns at line 68

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def findActiveRxns(cbm, thresh, rl = []):
    70       191          198      1.0      0.0      act = set()
    71       191         6680     35.0      0.0      arrayIdRs = array(cbm.idRs[:])
    72       191     10345690  54165.9     44.3      cbm.initLp()
    73       191          278      1.5      0.0      if rl:
    74       191          129      0.7      0.0          idRs = rl
    75                                               else:
    76                                                   idRs = cbm.idRs[:]
    77                                               # maximizing all reactions at once
    78                                               # reseting the objective
    79       191         6752     35.4      0.0      cbm.guro.setObjective(0)
    80                                               # setting the objective
    81       191          147      0.8      0.0      s = 'cbm.linobj = LinExpr([1.0] * len(cbm.idRs), ['
    82     92448        67973      0.7      0.3      for var in cbm.guro.getVars():
    83     92257       260738      2.8      1.1          s += 'cbm.%s, ' % var.varName
    84       191          624      3.3      0.0      s = s.rstrip(', ')
    85       191          386      2.0      0.0      s += '])'
    86       191       161581    846.0      0.7      exec s
    87                                               #EG Initially set the objective to maximize
    88       191        36482    191.0      0.2      cbm.guro.setObjective(cbm.linobj, 1)#1 for maximize
    89       191       318928   1669.8      1.4      cbm.guro.optimize()
    90     78588       138331      1.8      0.6      sol = abs(array([v.x for v in cbm.guro.getVars()]))
    91       161         1991     12.4      0.0      indices = (sol > thresh).nonzero()[0]
    92       161         5391     33.5      0.0      act.update(arrayIdRs[indices])
    93       161         6447     40.0      0.0      idRs = list(set(idRs) - act)
    94                                               # maximizing
    95     26152        14318      0.5      0.1      for rxn in idRs:
    96     25991        16040      0.6      0.1          if rxn not in act:
    97                                                   #EG Reduce the number of reactions that need to be investigated
    98                                                   #based off of upper boundary constraints
    99      7234        41582      5.7      0.2              if cbm.ub[cbm.idRs.index(rxn)] != 0:
   100                                                           # reseting the objective
   101      7234       183808     25.4      0.8                  cbm.guro.setObjective(0)
   102      7234       398807     55.1      1.7                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MAXIMIZE)' % rxn
   103      7234      4397044    607.8     18.8                  cbm.guro.optimize()
   104   3557428      6018905      1.7     25.8                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   105      7234        65218      9.0      0.3                  indices = (sol > thresh).nonzero()[0]
   106      7234       260727     36.0      1.1                  act.update(arrayIdRs[indices])
   107       161         2951     18.3      0.0      idRs = list(set(idRs) - act)
   108                                               # minimizing
   109       572          424      0.7      0.0      for rxn in idRs:
   110       411          271      0.7      0.0          if rxn not in act:
   111                                                   #EG Reduce the number of reactions that need to be investigated
   112                                                   #based off of lower boundary constraints
   113       409         1776      4.3      0.0              if cbm.lb[cbm.idRs.index(rxn)] != 0:
   114                                                           # reseting the objective
   115       409        10292     25.2      0.0                  cbm.guro.setObjective(0)
   116       409        22667     55.4      0.1                  exec 'cbm.guro.setObjective(cbm.%s, GRB.MINIMIZE)' % rxn
   117       409       176309    431.1      0.8                  cbm.guro.optimize()
   118    202430       355683      1.8      1.5                  sol = abs(array([v.x for v in cbm.guro.getVars()]))
   119       409         3660      8.9      0.0                  indices = (sol > thresh).nonzero()[0]
   120       409        10763     26.3      0.0                  act.update(arrayIdRs[indices])
   121       161           89      0.6      0.0      return act

Total time: 54.514 s
File: mba_3.py
Function: pruneRxn at line 123

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   123                                           @profile
   124                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   125                                                        lb_biomass):
   126       139           99      0.7      0.0      try:
   127                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   128                                                   #or if the biomass flux becomes inactive, stop pruning.
   129       139           73      0.5      0.0          rxntodelete = rxn
   130       139      8503622  61177.1     15.6          m0 = deleteCbmRxns(cbm, rxntodelete)
   131                                                   #NOTE the threshold for is set a bit higher for cH rxns
   132       139     18336771 131919.2     33.6          act = findActiveRxns(m0, thresh, cH)
   133       111         3530     31.8      0.0          cH_act = cH & act
   134       111          970      8.7      0.0          if (len(cH - cH_act) != 0):#not all cH rxns are active
   135        59           36      0.6      0.0              return cbm
   136                                                   #######################################################################
   137                                                   # INPUTS
   138        52           23      0.4      0.0          eps = 1E-10
   139        52           22      0.4      0.0          activityThreshold = 1E-10
   140        52           28      0.5      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   141                                                   #######################################################################
   142                                                   # STATEMENTS
   143        52        14328    275.5      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   144        52         2879     55.4      0.0          hfr = hfr & set(m0.idRs)
   145                                                   #forcing biomass production
   146        52          279      5.4      0.0          m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   147                                                   #minimizingg the sum of fluxes
   148        52       554321  10660.0      1.0          mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   149        52      7835551 150683.7     14.4          mtry1result.initMipGurobi()
   150        52       671757  12918.4      1.2          mtry1result.minSumFluxes_gurobi()
   151                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   152                                                   #function, so that the reactants and products could be written out
   153        52       587149  11291.3      1.1          nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   154        30           28      0.9      0.0      except:
   155        30           18      0.6      0.0          return cbm
   156                                                   #EG Identify the reactions that became inactive after the
   157                                                   #reaction was deleted. If extra deleted reactions cause the
   158                                                   #model to be unsolvable, or if extra deleted inactive reactions
   159                                                   #cause any of the hfrs to become inactive, or if a solution
   160                                                   #cannot be obtained with a biomass flux, only delete the one
   161                                                   #reaction. Otherwise, delete the inactive reactions.
   162        50           64      1.3      0.0      try:
   163        50         4098     82.0      0.0          inact = set(m0.idRs) - act - cH
   164        50      3125680  62513.6      5.7          m1 = deleteCbmRxns(m0, inact)
   165        50      6849315 136986.3     12.6          act2 = findActiveRxns(m1, thresh, cH)
   166        48         1423     29.6      0.0          cH_act2 = cH & act2
   167        48          391      8.1      0.0          if (len(cH - cH_act2) != 0):#not all cH rxns are active
   168         4            1      0.2      0.0              return m0
   169                                                   ###################################################################
   170                                                   # INPUTS
   171        44           28      0.6      0.0          eps = 1E-10
   172        44           22      0.5      0.0          activityThreshold = 1E-10
   173        44           23      0.5      0.0          fFreqBasedRxns = '../data/freqBasedRxns_%s.pkl'
   174                                                   ###################################################################
   175                                                   # STATEMENTS
   176        44        11672    265.3      0.0          hfr = importPickle(fFreqBasedRxns % description)['hfr']
   177        44         2351     53.4      0.0          hfr = hfr & set(m1.idRs)
   178                                                   #forcing biomass production
   179        44          244      5.5      0.0          m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   180                                                   #minimizing the sum of fluxes
   181        44       455091  10343.0      0.8          mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   182        44      6491525 147534.7     11.9          mtry2result.initMipGurobi()
   183        44       555155  12617.2      1.0          mtry2result.minSumFluxes_gurobi()
   184                                                   #EG Added activityThreshold and the m1.rxns dictionary
   185                                                   #to the function, so that the reactants and products could
   186                                                   #be written out
   187        44       505346  11485.1      0.9          nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   188        44           63      1.4      0.0          return m1
   189         2            2      1.0      0.0      except:
   190         2            0      0.0      0.0          return m0

Total time: 54.8298 s
File: mba_3.py
Function: iterativePrunning at line 195

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   195                                           @profile
   196                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   197                                                                 repetition, thresh = 1E-10, EXrxns = [],
   198                                                                 EXtrrxns = [], Othertrrxns = []):
   199                                               """
   200                                               solver can be 'cplex', 'glpk' or 'gurobi'
   201                                               """
   202         1            1      1.0      0.0      if len(EXrxns) > 0:
   203                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   204                                                   random.shuffle(EXrxnsprune)
   205                                                   while EXrxnsprune:
   206                                                       rxn1 = EXrxnsprune.pop()
   207                                                       try:
   208                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   209                                                                             repetition, biomassRxn, lb_biomass)
   210                                                           EXrxnsprune2 = []
   211                                                           for k in mTemp1.idRs:
   212                                                               if k in EXrxnsprune:
   213                                                                   EXrxnsprune2.append(k)
   214                                                           random.shuffle(EXrxnsprune2)
   215                                                           EXrxnsprune = EXrxnsprune2
   216                                                       except NameError:
   217                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   218                                                                             repetition, biomassRxn, lb_biomass)
   219                                                           EXrxnsprune2 = []
   220                                                           for k in mTemp1.idRs:
   221                                                               if k in EXrxnsprune:
   222                                                                   EXrxnsprune2.append(k)
   223                                                           random.shuffle(EXrxnsprune2)
   224                                                           EXrxnsprune = EXrxnsprune2
   225         1            1      1.0      0.0      if len(EXtrrxns) > 0:
   226                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   227                                                   EXtrrxnsprunelist = []
   228                                                   for j in EXtrrxnsprune:
   229                                                       if j in mTemp1.idRs:
   230                                                           EXtrrxnsprunelist.append(j)
   231                                                   random.shuffle(EXtrrxnsprune)
   232                                                   while EXtrrxnsprune:
   233                                                       rxn2 = EXtrrxnsprune.pop()
   234                                                       try:
   235                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   236                                                                             repetition, biomassRxn, lb_biomass)
   237                                                           EXtrrxnsprune2 = []
   238                                                           for k in mTemp1.idRs:
   239                                                               if k in EXtrrxnsprune:
   240                                                                   EXtrrxnsprune2.append(k)
   241                                                           random.shuffle(EXtrrxnsprune2)
   242                                                           EXtrrxnsprune = EXtrrxnsprune2
   243                                                       except NameError:
   244                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   245                                                                             repetition, biomassRxn, lb_biomass)
   246                                                           EXtrrxnsprune2 = []
   247                                                           for k in mTemp1.idRs:
   248                                                               if k in EXtrrxnsprune:
   249                                                                   EXtrrxnsprune2.append(k)
   250                                                           random.shuffle(EXtrrxnsprune2)
   251                                                           EXtrrxnsprune = EXtrrxnsprune2
   252                                           
   253         1            1      1.0      0.0      prunableRxns = []
   254         1            1      1.0      0.0      try:
   255         1            3      3.0      0.0          for j in mTemp1.idRs:
   256                                                       if j not in list(cH):
   257                                                           if j not in EXrxns:
   258                                                               if j not in EXtrrxns:
   259                                                                   if j not in Othertrrxns:
   260                                                                       prunableRxns.append(j)
   261         1            2      2.0      0.0      except NameError:
   262       747          368      0.5      0.0          for j in m.idRs:
   263       746         3739      5.0      0.0              if j not in list(cH):
   264       397          193      0.5      0.0                  if j not in EXrxns:
   265       397          190      0.5      0.0                      if j not in EXtrrxns:
   266       397          190      0.5      0.0                          if j not in Othertrrxns:
   267       397          216      0.5      0.0                              prunableRxns.append(j)
   268         1          236    236.0      0.0      random.shuffle(prunableRxns)
   269       140           96      0.7      0.0      while prunableRxns:
   270       139          153      1.1      0.0          rxn3 = prunableRxns.pop()
   271       139           78      0.6      0.0          try:
   272       139           99      0.7      0.0              mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   273       138     53567672 388171.5     97.7                                repetition, biomassRxn, lb_biomass)
   274       138          158      1.1      0.0              prunableRxns2 = []
   275     66032        33815      0.5      0.1              for k in mTemp1.idRs:
   276     65894        71787      1.1      0.1                  if k in prunableRxns:
   277     12208         9073      0.7      0.0                      prunableRxns2.append(k)
   278       138         8421     61.0      0.0              random.shuffle(prunableRxns2)
   279       138          140      1.0      0.0              prunableRxns = prunableRxns2
   280                                                       #prunableRxns2_appended = prunableRxns.append()
   281                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   282                                                       #for k in mTemp1.idRs:
   283                                                       #    if k in prunableRxns:
   284                                                       #        prunableRxns2.append(k)
   285                                                       #random.shuffle(prunableRxns2_appended)
   286                                                       #prunableRxns = prunableRxns2_appended
   287         1            1      1.0      0.0          except NameError:
   288         1            0      0.0      0.0              mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   289         1      1130806 1130806.0      2.1                                repetition, biomassRxn, lb_biomass)
   290         1            2      2.0      0.0              prunableRxns2 = []
   291       607          314      0.5      0.0              for k in mTemp1.idRs:
   292       606         1698      2.8      0.0                  if k in prunableRxns:
   293       257          159      0.6      0.0                      prunableRxns2.append(k)
   294         1          151    151.0      0.0              random.shuffle(prunableRxns2)
   295         1            1      1.0      0.0              prunableRxns = prunableRxns2
   296                                                       #prunableRxns2_appended = prunableRxns.append()
   297                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   298                                                       #random.shuffle(prunableRxns2_appended)
   299                                                       #prunableRxns = prunableRxns2_appended
   300                                                       #for k in mTemp1.idRs:
   301                                                       #    if k in prunableRxns:
   302                                                       #        prunableRxns2.append(k)
   303                                                       #random.shuffle(prunableRxns2)
   304                                                       #prunableRxns = prunableRxns2
   305         1            1      1.0      0.0      return mTemp1.idRs

