egibb@filipp05:~/git/EXAMO-reborn/150723_recon2_iMM904_iAF1260$ kernprof -lv 150723_02_04.py iMM904_NADcorrected.xml 150126_degapped_iMM904_with_metabolite_mapping_complexes_36_stoichiometry_lb_AA_AC_B_Polyamine_Sterol.pkl 141013_GCR1A R_biomass_published 1 > 150727_output.txt

Wrote profile results to 150723_02_04.py.lprof
Timer unit: 1e-06 s

Total time: 0 s
File: examoModules/mba.py
Function: pruneRxn at line 119

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   119                                           @profile
   120                                           def pruneRxn(cbm, cH, rxn, thresh, description, repetition, biomassRxn,
   121                                                        lb_biomass):
   122                                               try:
   123                                                   #EG Prune a reaction. If a flux soltuion cannot be obtained
   124                                                   #or if the biomass flux becomes inactive, stop pruning.
   125                                                   rxntodelete = rxn
   126                                                   m0 = deleteCbmRxns(cbm, rxntodelete)
   127                                                   #NOTE the threshold for is set a bit higher for cH rxns
   128                                                   act = findActiveRxns(m0, thresh, cH)
   129                                                   cH_act = cH & act
   130                                                   if (len(cH - cH_act) != 0):#not all cH rxns are active
   131                                                       #print "not all active 1"
   132                                                       return cbm
   133                                                   #######################################################################
   134                                                   # INPUTS
   135                                                   eps = 1E-10
   136                                                   activityThreshold = 1E-10
   137                                                   fFreqBasedRxns = 'data/freqBasedRxns_%s.pkl'
   138                                                   #######################################################################
   139                                                   # STATEMENTS
   140                                                   hfr = importPickle(fFreqBasedRxns % description)['hfr']
   141                                                   hfr = hfr & set(m0.idRs)
   142                                                   #forcing biomass production
   143                                                   m0.lb[m0.idRs.index(biomassRxn)] = lb_biomass
   144                                                   #minimizingg the sum of fluxes
   145                                                   mtry1result = MipSeparateFwdRev_gurobi(m0, hfr, eps)
   146                                                   mtry1result.initMipGurobi()
   147                                                   mtry1result.minSumFluxes_gurobi()
   148                                                   #EG Added activityThreshold and the m0.rxns dictionary to the
   149                                                   #function, so that the reactants and products could be written out
   150                                                   nz = getNzRxnsGurobi(mtry1result, activityThreshold, m0.rxns)[1]
   151                                               except:
   152                                                   #print "exception 1"
   153                                                   return cbm
   154                                                   #EG Identify the reactions that became inactive after the
   155                                                   #reaction was deleted. If extra deleted reactions cause the
   156                                                   #model to be unsolvable, or if extra deleted inactive reactions
   157                                                   #cause any of the hfrs to become inactive, or if a solution
   158                                                   #cannot be obtained with a biomass flux, only delete the one
   159                                                   #reaction. Otherwise, delete the inactive reactions.
   160                                               try:
   161                                                   inact = set(m0.idRs) - act - cH
   162                                                   m1 = deleteCbmRxns(m0, inact)
   163                                                   act2 = findActiveRxns(m1, thresh, cH)
   164                                                   cH_act2 = cH & act2
   165                                                   if (len(cH - cH_act2) != 0):#not all cH rxns are active
   166                                                       #print rxntodelete
   167                                                       return m0
   168                                                   ###################################################################
   169                                                   # INPUTS
   170                                                   eps = 1E-10
   171                                                   activityThreshold = 1E-10
   172                                                   fFreqBasedRxns = 'data/freqBasedRxns_%s.pkl'
   173                                                   ###################################################################
   174                                                   # STATEMENTS
   175                                                   hfr = importPickle(fFreqBasedRxns % description)['hfr']
   176                                                   hfr = hfr & set(m1.idRs)
   177                                                   #forcing biomass production
   178                                                   m1.lb[m1.idRs.index(biomassRxn)] = lb_biomass
   179                                                   #minimizing the sum of fluxes
   180                                                   mtry2result = MipSeparateFwdRev_gurobi(m1, hfr, eps)
   181                                                   mtry2result.initMipGurobi()
   182                                                   mtry2result.minSumFluxes_gurobi()
   183                                                   #EG Added activityThreshold and the m1.rxns dictionary
   184                                                   #to the function, so that the reactants and products could
   185                                                   #be written out
   186                                                   nz = getNzRxnsGurobi(mtry2result, activityThreshold, m1.rxns)[1]
   187                                                   #print inact
   188                                                   return m1
   189                                               except:
   190                                                   #print "exception 2"
   191                                                   return m0

Total time: 0 s
File: examoModules/mba.py
Function: iterativePrunning at line 196

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   196                                           @profile
   197                                           def iterativePrunning(i, m, cH, description, biomassRxn, lb_biomass,
   198                                                                 repetition, thresh = 1E-10, EXrxns = [],
   199                                                                 EXtrrxns = [], Othertrrxns = []):
   200                                               """
   201                                               solver can be 'cplex', 'glpk' or 'gurobi'
   202                                               """
   203                                               if len(EXrxns) > 0:
   204                                                   EXrxnsprune = list(set(list(EXrxns)) - cH)
   205                                                   random.shuffle(EXrxnsprune)
   206                                                   while EXrxnsprune:
   207                                                       rxn1 = EXrxnsprune.pop()
   208                                                       try:
   209                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn1, thresh, description,
   210                                                                             repetition, biomassRxn, lb_biomass)
   211                                                           EXrxnsprune2 = []
   212                                                           for k in mTemp1.idRs:
   213                                                               if k in EXrxnsprune:
   214                                                                   EXrxnsprune2.append(k)
   215                                                           random.shuffle(EXrxnsprune2)
   216                                                           EXrxnsprune = EXrxnsprune2
   217                                                       except NameError:
   218                                                           mTemp1 = pruneRxn(m, cH, rxn1, thresh, description,
   219                                                                             repetition, biomassRxn, lb_biomass)
   220                                                           EXrxnsprune2 = []
   221                                                           for k in mTemp1.idRs:
   222                                                               if k in EXrxnsprune:
   223                                                                   EXrxnsprune2.append(k)
   224                                                           random.shuffle(EXrxnsprune2)
   225                                                           EXrxnsprune = EXrxnsprune2
   226                                               if len(EXtrrxns) > 0:
   227                                                   EXtrrxnsprune = list(set(list(EXtrrxns)) - cH)
   228                                                   EXtrrxnsprunelist = []
   229                                                   for j in EXtrrxnsprune:
   230                                                       if j in mTemp1.idRs:
   231                                                           EXtrrxnsprunelist.append(j)
   232                                                   random.shuffle(EXtrrxnsprune)
   233                                                   while EXtrrxnsprune:
   234                                                       rxn2 = EXtrrxnsprune.pop()
   235                                                       try:
   236                                                           mTemp1 = pruneRxn(mTemp1, cH, rxn2, thresh, description,
   237                                                                             repetition, biomassRxn, lb_biomass)
   238                                                           EXtrrxnsprune2 = []
   239                                                           for k in mTemp1.idRs:
   240                                                               if k in EXtrrxnsprune:
   241                                                                   EXtrrxnsprune2.append(k)
   242                                                           random.shuffle(EXtrrxnsprune2)
   243                                                           EXtrrxnsprune = EXtrrxnsprune2
   244                                                       except NameError:
   245                                                           mTemp1 = pruneRxn(m, cH, rxn2, thresh, description,
   246                                                                             repetition, biomassRxn, lb_biomass)
   247                                                           EXtrrxnsprune2 = []
   248                                                           for k in mTemp1.idRs:
   249                                                               if k in EXtrrxnsprune:
   250                                                                   EXtrrxnsprune2.append(k)
   251                                                           random.shuffle(EXtrrxnsprune2)
   252                                                           EXtrrxnsprune = EXtrrxnsprune2
   253                                           
   254                                               prunableRxns = []
   255                                               try:
   256                                                   for j in mTemp1.idRs:
   257                                                       if j not in list(cH):
   258                                                           if j not in EXrxns:
   259                                                               if j not in EXtrrxns:
   260                                                                   if j not in Othertrrxns:
   261                                                                       prunableRxns.append(j)
   262                                               except NameError:
   263                                                   for j in m.idRs:
   264                                                       if j not in list(cH):
   265                                                           if j not in EXrxns:
   266                                                               if j not in EXtrrxns:
   267                                                                   if j not in Othertrrxns:
   268                                                                       prunableRxns.append(j)
   269                                               random.shuffle(prunableRxns)
   270                                               while prunableRxns:
   271                                                   rxn3 = prunableRxns.pop()
   272                                                   try:
   273                                                       mTemp1 = pruneRxn(mTemp1, cH, rxn3, thresh, description,
   274                                                                         repetition, biomassRxn, lb_biomass)
   275                                                       prunableRxns2 = []
   276                                                       for k in mTemp1.idRs:
   277                                                           if k in prunableRxns:
   278                                                               prunableRxns2.append(k)
   279                                                       random.shuffle(prunableRxns2)
   280                                                       prunableRxns = prunableRxns2
   281                                                       #prunableRxns2_appended = prunableRxns.append()
   282                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   283                                                       #for k in mTemp1.idRs:
   284                                                       #    if k in prunableRxns:
   285                                                       #        prunableRxns2.append(k)
   286                                                       #random.shuffle(prunableRxns2_appended)
   287                                                       #prunableRxns = prunableRxns2_appended
   288                                                   except NameError:
   289                                                       mTemp1 = pruneRxn(m, cH, rxn3, thresh, description,
   290                                                                         repetition, biomassRxn, lb_biomass)
   291                                                       prunableRxns2 = []
   292                                                       for k in mTemp1.idRs:
   293                                                           if k in prunableRxns:
   294                                                               prunableRxns2.append(k)
   295                                                       random.shuffle(prunableRxns2)
   296                                                       prunableRxns = prunableRxns2
   297                                                       #prunableRxns2_appended = prunableRxns.append()
   298                                                       #prunableRxns2_appended k for k in mTemp1.idRs if k in prunableRnxs
   299                                                       #random.shuffle(prunableRxns2_appended)
   300                                                       #prunableRxns = prunableRxns2_appended
   301                                                       #for k in mTemp1.idRs:
   302                                                       #    if k in prunableRxns:
   303                                                       #        prunableRxns2.append(k)
   304                                                       #random.shuffle(prunableRxns2)
   305                                                       #prunableRxns = prunableRxns2
   306                                               return mTemp1.idRs

